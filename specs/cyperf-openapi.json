{
  "components": {
    "schemas": {
      "APILink": {
        "description": "Defines a single link response as expected by the REST API Browser.",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "referencesCount": {
            "type": "integer"
          },
          "rel": {
            "$ref": "#/components/schemas/APIRelationship",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/APIRelationship",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "href",
          "rel",
          "type"
        ],
        "type": "object"
      },
      "APIRelationship": {
        "description": "Defines possible relationships for APILinks.",
        "enum": [
          "self",
          "meta",
          "child",
          "doc"
        ],
        "type": "string"
      },
      "Action": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionBase"
          },
          {
            "$ref": "#/components/schemas/DummyObject"
          },
          {
            "type": "object"
          }
        ]
      },
      "ActionBase": {
        "properties": {
          "DstHost": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Host"
              }
            ],
            "description": "The destination host of the action."
          },
          "Exchanges": {
            "items": {
              "$ref": "#/components/schemas/Exchange"
            },
            "type": "array",
            "x-delete": "-,-",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "-",
            "x-put": "-,*"
          },
          "Index": {
            "description": "The index of the action.",
            "format": "int32",
            "minimum": "1",
            "type": "integer",
            "x-readonly": "true"
          },
          "IsBanner": {
            "description": "Indicates if this is a required action, can only be add once and also must be the first",
            "type": "boolean",
            "x-readonly": "true"
          },
          "IsDeprecated": {
            "description": "A value that indicates if the action is deprecated.",
            "type": "boolean",
            "x-readonly": "true"
          },
          "IsHostname": {
            "format": "int32",
            "type": "integer"
          },
          "IsStrike": {
            "description": "A value that indicates if the action is a strike.",
            "type": "boolean",
            "x-readonly": "true"
          },
          "Name": {
            "description": "The name of the action.",
            "maxLength": "200",
            "type": "string",
            "x-readonly": "true"
          },
          "Params": {
            "items": {
              "$ref": "#/components/schemas/Params"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-put": "-,*"
          },
          "Port": {
            "description": "The port of the destination host.",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer"
          },
          "ProtocolID": {
            "type": "string"
          },
          "RequiresUniqueness": {
            "description": "If true, for applications with the same protocol id, application/attack must have been uniquely identified in previous commands.",
            "type": "boolean",
            "x-readonly": "true"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Exchanges",
          "IsStrike",
          "ProtocolID"
        ],
        "type": "object"
      },
      "AdvancedSettings": {
        "properties": {
          "AgentOptimizationMode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentOptimizationMode"
              }
            ]
          },
          "AgentStreamingPurposeCPUPercent": {
            "description": "The CPU percentage reserved for streaming purpose use (default: 0).",
            "format": "int32",
            "maximum": "99",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(25)"
          },
          "AutomaticCPUPercent": {
            "description": "Deprecated. Use the calibration operation to find the best value for AgentStreamingPurposeCPUPercent for the current assigned agents.",
            "type": "boolean",
            "x-auto": "default(true)",
            "x-deprecated": "true"
          },
          "ConnectionGracefulStopTimeout": {
            "description": "The time the test will wait all connections to be graceful stopped (default: 15 seconds).",
            "format": "int64",
            "maximum": "2160000",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(120)"
          },
          "WarmUpPeriod": {
            "description": "The time that servers may need to warm up, when clients should wait (default: 0 seconds).",
            "format": "int64",
            "maximum": "2160000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          }
        },
        "required": [
          "WarmUpPeriod"
        ],
        "type": "object"
      },
      "Agent": {
        "properties": {
          "AgentTags": {
            "description": "A list of tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "IP": {
            "description": "The management IP of the agent",
            "readOnly": "true",
            "type": "string"
          },
          "Interfaces": {
            "description": "A list of test interfaces available on the agent",
            "items": {
              "$ref": "#/components/schemas/Interface"
            },
            "type": "array"
          },
          "LastUpdate": {
            "description": "A Unix timestamp that indicates when the agent was last updated",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "ReservationID": {
            "description": "The ID of the reservation",
            "readOnly": "true",
            "type": "string"
          },
          "SelectedEnv": {
            "$ref": "#/components/schemas/SelectedEnv"
          },
          "SelectionStatus": {
            "description": "The current status of the selection operation",
            "type": "string"
          },
          "SessionName": {
            "description": "The session's name where the agent is running",
            "readOnly": "true",
            "type": "string"
          },
          "Status": {
            "description": "The current status of the agent",
            "readOnly": "true",
            "type": "string"
          },
          "cpuInfo": {
            "description": "The CPU information from the agent",
            "items": {
              "$ref": "#/components/schemas/AgentCPUInfo"
            },
            "readOnly": "true",
            "type": "array"
          },
          "dpdkEnabled": {
            "description": "A flag indicating whether DPDK is enabled",
            "type": "boolean"
          },
          "features": {
            "$ref": "#/components/schemas/AgentFeatures"
          },
          "hostname": {
            "description": "The hostname of the agent",
            "readOnly": "true",
            "type": "string"
          },
          "id": {
            "description": "The agent's unique identifier",
            "readOnly": "true",
            "type": "string"
          },
          "memoryMB": {
            "description": "The memory (in mega bytes) of the agent",
            "format": "double",
            "readOnly": "true",
            "type": "number"
          },
          "mgmtInterface": {
            "$ref": "#/components/schemas/Interface"
          },
          "ntpInfo": {
            "$ref": "#/components/schemas/NtpInfo"
          },
          "offline": {
            "description": "A flag indicating if the agent is considered online or offline",
            "readOnly": "true",
            "type": "boolean"
          },
          "owner": {
            "description": "A user-friendly display name for the agent's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the agent's owner",
            "readOnly": "true",
            "type": "string"
          },
          "packageVersionStatus": {
            "description": "A message with information about the current software version and user recommendations.",
            "readOnly": "true",
            "type": "string"
          },
          "requiresUpdating": {
            "description": "A flag indicating whether the agent is not using the recommended version",
            "readOnly": "true",
            "type": "boolean"
          },
          "systemInfo": {
            "$ref": "#/components/schemas/SystemInfo"
          }
        },
        "type": "object"
      },
      "AgentAssignmentDetails": {
        "description": "Details of an agent assignment by ID",
        "properties": {
          "agentId": {
            "description": "The id of the agent that is assigned.",
            "type": "string"
          },
          "captureSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CaptureSettings"
              }
            ],
            "description": "The capture settings of the agent that is assigned.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "interfaces": {
            "description": "The names of the assigned test interfaces for the agent.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "agentId",
          "interfaces"
        ],
        "type": "object"
      },
      "AgentAssignments": {
        "description": "The agents assigned to the current test configuration",
        "properties": {
          "ByID": {
            "description": "The agents statically assigned to the current test configuration.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AgentAssignmentDetails"
                }
              ]
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "*,*",
            "x-put": "*,*"
          },
          "ByTag": {
            "description": "The tags according to which the agents are dynamically assigned.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ByTag",
          "ByID"
        ],
        "type": "object"
      },
      "AgentCPUInfo": {
        "properties": {
          "CPUCoreCount": {
            "format": "int32",
            "readOnly": "true",
            "type": "integer"
          },
          "CPUFreqMHz": {
            "format": "double",
            "readOnly": "true",
            "type": "number"
          },
          "Family": {
            "readOnly": "true",
            "type": "string"
          },
          "Model": {
            "readOnly": "true",
            "type": "string"
          },
          "ModelName": {
            "readOnly": "true",
            "type": "string"
          },
          "VendorID": {
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentFeatures": {
        "properties": {
          "dpdkUsage": {
            "description": "A flag indicating whether DPDK usage is supported",
            "readOnly": "true",
            "type": "string"
          },
          "update": {
            "description": "A flag indicating if update operation is supported",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentOptimizationMode": {
        "description": "Use this property to switch between different agent optimization strategies (default: BALANCED_MODE)",
        "enum": [
          "BALANCED_MODE",
          "RATE_MODE"
        ],
        "type": "string",
        "x-auto": "default(BALANCED_MODE)"
      },
      "AgentRelease": {
        "properties": {
          "agentId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentReservation": {
        "properties": {
          "agentId": {
            "type": "string"
          },
          "agentPayloadNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "generalPurposeCPUPercent": {
            "type": "integer"
          },
          "interfaces": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipAddressVersionUsed": {
            "type": "string"
          },
          "optimizationMode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentToBeRebooted": {
        "properties": {
          "agentId": {
            "description": "The ID of the agent",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentsGroup": {
        "properties": {
          "Agents": {
            "description": "The IDs of the agents that are part of the group",
            "items": {
              "type": "string"
            },
            "readOnly": "true",
            "type": "array"
          },
          "Available": {
            "description": "Indicates whether each agent in the group is not reserved",
            "readOnly": "true",
            "type": "boolean"
          },
          "Name": {
            "description": "The name of the agent group",
            "readOnly": "true",
            "type": "string"
          },
          "Online": {
            "description": "Indicates whether each agent in the group has been updated in the last 5 minutes",
            "readOnly": "true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Application": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Scenario"
          },
          {
            "properties": {
              "ClientTLSProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfileForApplication))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "DataTypes": {
                "items": {
                  "$ref": "#/components/schemas/DataType"
                },
                "type": "array",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              },
              "InheritTLS": {
                "type": "boolean",
                "x-auto": "default(true)"
              },
              "IsStatelessStream": {
                "type": "boolean",
                "x-readonly": "true"
              },
              "ObjectiveWeight": {
                "description": "The objective weight of the application.",
                "format": "int64",
                "maximum": "10000",
                "minimum": "1",
                "type": "integer",
                "x-auto": "default(1)"
              },
              "ServerTLSProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultServerTlsProfileForApplication))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "StatelessStream": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StatelessStream"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "Static": {
                "type": "boolean",
                "x-auto": "default(false)",
                "x-readonly": "true"
              },
              "SupportedApps": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "SupportsCalibration": {
                "type": "boolean",
                "x-auto": "default(False)",
                "x-readonly": "true"
              },
              "SupportsStrikes": {
                "type": "boolean",
                "x-auto": "default(True)",
                "x-readonly": "true"
              },
              "SupportsTLS": {
                "type": "boolean",
                "x-auto": "default(True)",
                "x-readonly": "true"
              },
              "Tracks": {
                "items": {
                  "$ref": "#/components/schemas/Track"
                },
                "maxItems": "1",
                "type": "array",
                "x-auto": "default(items(1))",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              },
              "modify-excluded-dut-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateApplicationNetworkMapping"
              },
              "modify-tags-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateApplicationNetworkMapping"
              }
            },
            "required": [
              "Tracks",
              "ObjectiveWeight",
              "DataTypes",
              "InheritTLS",
              "IsStatelessStream",
              "Static"
            ],
            "type": "object"
          }
        ]
      },
      "ApplicationProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrafficProfileBase"
          },
          {
            "description": "The configuration for DUT",
            "properties": {
              "Applications": {
                "items": {
                  "$ref": "#/components/schemas/Application"
                },
                "type": "array",
                "x-delete": "*,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              },
              "DefaultNetworkMapping": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkMapping"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required"
              },
              "Name": {
                "maxLength": "200",
                "type": "string",
                "x-auto": "default(Application Profile)"
              },
              "ObjectivesAndTimeline": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ObjectivesAndTimeline"
                  }
                ],
                "x-auto": "default(method(GetDefaultObjectivesAndTimeline))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "add-applications": {
                "items": {
                  "$ref": "#/components/schemas/ExternalResourceInfo"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,AddApps"
              },
              "modify-excluded-dut-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateTrafficProfileNetworkMapping"
              },
              "modify-tags-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateTrafficProfileNetworkMapping"
              },
              "reset-tags-to-default": {
                "items": {
                  "format": "byte",
                  "type": "string"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,ResetTrafficProfileNetworkMapping"
              }
            },
            "required": [
              "Name",
              "Applications",
              "ObjectivesAndTimeline",
              "DefaultNetworkMapping"
            ],
            "type": "object"
          }
        ]
      },
      "ApplicationType": {
        "properties": {
          "Commands": {
            "description": "The commands included in the flow",
            "items": {
              "$ref": "#/components/schemas/Command"
            },
            "type": "array"
          },
          "Connections": {
            "description": "The connections included in the flow",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "readOnly": "true",
            "type": "array"
          },
          "CustomStats": {
            "description": "The custom statistics of the application",
            "items": {
              "$ref": "#/components/schemas/CustomStat"
            },
            "type": "array"
          },
          "DataTypes": {
            "description": "The data types definition of the parameters",
            "items": {
              "$ref": "#/components/schemas/DataType"
            },
            "type": "array"
          },
          "Definition": {
            "$ref": "#/components/schemas/Definition"
          },
          "Description": {
            "description": "The description of the application",
            "type": "string"
          },
          "Endpoints": {
            "description": "The list of endpoints used by the application",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            },
            "readOnly": "true",
            "type": "array"
          },
          "FileName": {
            "description": "The name of the XML file that contains the application definition",
            "type": "string"
          },
          "HasBannerCommand": {
            "description": "Indicates if there is a command that is required, can only be add once and also must be the first",
            "type": "boolean"
          },
          "Md5Content": {
            "description": "The MD5 value of the XML file that contains the application definition.",
            "type": "string"
          },
          "Md5Metadata": {
            "description": "The MD5 value of the XML file that contains the metadata definition.",
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "Name": {
            "description": "The display name of the application",
            "type": "string"
          },
          "Parameters": {
            "description": "The parameters of the application",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "readOnly": "true",
            "type": "array"
          },
          "Strikes": {
            "description": "The commands and strikes included in the flow",
            "items": {
              "$ref": "#/components/schemas/Command"
            },
            "type": "array"
          },
          "SupportsCalibration": {
            "description": "Indicates if the best configuration can be computed automatically",
            "type": "boolean"
          },
          "SupportsClientHTTPProfile": {
            "description": "Indicates if the application uses Client HTTP profiles.",
            "type": "boolean"
          },
          "SupportsHTTPProfiles": {
            "description": "Indicates if the application uses HTTP profiles.",
            "type": "boolean"
          },
          "SupportsServerHTTPProfile": {
            "description": "Indicates if the application uses Server HTTP profiles.",
            "type": "boolean"
          },
          "SupportsStrikes": {
            "description": "Indicates if the application supports strikes.",
            "type": "boolean"
          },
          "SupportsTLS": {
            "description": "Indicates if the application supports TLS protocol.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the flow",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppsecApp": {
        "properties": {
          "App": {
            "$ref": "#/components/schemas/Application"
          },
          "Description": {
            "description": "The description of the application",
            "type": "string"
          },
          "Name": {
            "description": "The user friendly name of the application",
            "maxLength": "200",
            "type": "string"
          },
          "Static": {
            "description": "If true, the application/strike is generated from Controller",
            "readOnly": "true",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the application",
            "readOnly": "true",
            "type": "string"
          },
          "owner": {
            "description": "The friendly display name of the application's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the application's owner",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppsecAttack": {
        "properties": {
          "Attack": {
            "$ref": "#/components/schemas/Attack"
          },
          "Description": {
            "description": "The description of the attack",
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "Name": {
            "description": "The user friendly name of the attack",
            "maxLength": "200",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the attack",
            "readOnly": "true",
            "type": "string"
          },
          "owner": {
            "description": "The friendly display name of the attack's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the attack's owner",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppsecConfig": {
        "properties": {
          "Config": {
            "$ref": "#/components/schemas/Config"
          },
          "SessionID": {
            "description": "The unique identifier of the session this configuration belongs to",
            "readOnly": "true",
            "type": "string"
          },
          "TemplateID": {
            "description": "The unique identifier of the CyPerf configuration template from which this configuration was created",
            "readOnly": "true",
            "type": "string"
          },
          "dataModelVersion": {
            "description": "The version of the data model used for this configuration",
            "readOnly": "true",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the CyPerf configuration",
            "readOnly": "true",
            "type": "string"
          },
          "Name": {
            "description": "The name of the configuration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArchiveInfo": {
        "properties": {
          "filename": {
            "description": "The name of the archive.",
            "type": "string"
          },
          "id": {
            "description": "The subresource id of the status.",
            "type": "integer"
          },
          "message": {
            "description": "A message from the operation (optional).",
            "type": "string"
          },
          "resultUrl": {
            "description": "The URL where the archive is available.",
            "type": "string"
          },
          "size": {
            "description": "The size in bytes of the archive.",
            "type": "integer"
          },
          "state": {
            "description": "The state of the archive/collection.",
            "type": "string"
          },
          "timestamp": {
            "description": "The timestamp of archive creation.",
            "type": "string"
          },
          "url": {
            "description": "The URL to get the status of the archive.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "filename",
          "timestamp",
          "state",
          "message",
          "url",
          "resultUrl"
        ],
        "type": "object"
      },
      "ArrayV2ElementMetadata": {
        "properties": {
          "id": {
            "description": "The id of the element",
            "type": "string"
          },
          "type": {
            "description": "The type of the element",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AsyncContext": {
        "properties": {
          "id": {
            "description": "The ID of the async operation",
            "type": "integer"
          },
          "message": {
            "description": "A message to the user about the current state of the operation",
            "type": "string"
          },
          "progress": {
            "description": "Number between 0 and 100 showing the current progress of the operation",
            "type": "integer"
          },
          "result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "description": "The result of the operation. Appears only if the operation is completed. Not required if resultUrl is populated. The actual type of this field is operation specific."
          },
          "resultUrl": {
            "description": "The URL where the result of the operation is stored. Appears only if the operation is completed. Not required if the result is populated.",
            "type": "string"
          },
          "state": {
            "description": "A string enum showing the state of the async operation",
            "type": "string"
          },
          "type": {
            "description": "The async operation that is being executed",
            "type": "string"
          },
          "url": {
            "description": "The URL where the user has to call GET requests until the async operation is completed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AsyncOperationResponse": {
        "description": "A response to an async operation.",
        "properties": {
          "id": {
            "description": "The ID of the async operation.",
            "type": "integer"
          },
          "message": {
            "description": "A message to the user about the current state of the operation.",
            "type": "string"
          },
          "progress": {
            "description": "Number between 0 and 100 showing the current progress of the operation.",
            "maximum": "100",
            "minimum": "0",
            "type": "integer"
          },
          "result": {
            "description": "The result of the operation. Only appears if the operation is completed. Not necessary if resultUrl is populated. The actual type of this field is operation specific.",
            "type": "object"
          },
          "resultUrl": {
            "description": "The URL where the result of the operation is stored. Only appears if the operation is completed. Not necessary if result is populated.",
            "type": "string"
          },
          "state": {
            "description": "A string enum showing the state of the async operation.",
            "enum": [
              "SUCCESS",
              "ERROR",
              "TIMED_OUT",
              "EXCEPTION",
              "CANCELLED",
              "IN_PROGRESS",
              "NOT_FOUND"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of operation being executed.",
            "type": "string"
          },
          "url": {
            "description": "The URL of this operation instance. Used for polling status.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Attack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Scenario"
          },
          {
            "properties": {
              "ClientTLSProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfileForAttack))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "InheritTLS": {
                "type": "boolean",
                "x-auto": "default(true)"
              },
              "ServerTLSProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultServerTlsProfileForAttack))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "SupportsTLS": {
                "type": "boolean",
                "x-auto": "default(True)",
                "x-readonly": "true"
              },
              "Tracks": {
                "items": {
                  "$ref": "#/components/schemas/AttackTrack"
                },
                "maxItems": "1",
                "type": "array",
                "x-auto": "default(items(1))",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              },
              "create": {
                "items": {
                  "format": "byte",
                  "type": "string"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "CreateAttack"
              },
              "modify-excluded-dut-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateAttackNetworkMapping"
              },
              "modify-tags-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateAttackNetworkMapping"
              }
            },
            "required": [
              "Tracks",
              "InheritTLS"
            ],
            "type": "object"
          }
        ]
      },
      "AttackAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionBase"
          },
          {
            "$ref": "#/components/schemas/DummyObject"
          },
          {
            "type": "object"
          }
        ]
      },
      "AttackObjectivesAndTimeline": {
        "properties": {
          "TimelineSegments": {
            "items": {
              "$ref": "#/components/schemas/AttackTimelineSegment"
            },
            "type": "array",
            "x-auto": "default(items(1))",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          }
        },
        "required": [
          "TimelineSegments"
        ],
        "type": "object"
      },
      "AttackProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TrafficProfileBase"
          },
          {
            "description": "The configuration for DUT",
            "properties": {
              "Attacks": {
                "items": {
                  "$ref": "#/components/schemas/Attack"
                },
                "type": "array",
                "x-delete": "*,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              },
              "DefaultNetworkMapping": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NetworkMapping"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required"
              },
              "Name": {
                "maxLength": "200",
                "type": "string",
                "x-auto": "default(Attack Profile)"
              },
              "ObjectivesAndTimeline": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttackObjectivesAndTimeline"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "add-attacks": {
                "items": {
                  "$ref": "#/components/schemas/ExternalResourceInfo"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,AddAttacks"
              },
              "modify-excluded-dut-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateAttackProfileNetworkMapping"
              },
              "modify-tags-recursively": {
                "items": {
                  "$ref": "#/components/schemas/UpdateNetworkMapping"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,UpdateAttackProfileNetworkMapping"
              },
              "reset-tags-to-default": {
                "items": {
                  "format": "byte",
                  "type": "string"
                },
                "type": "array",
                "x-operation": "true",
                "x-post": "-,ResetAttackProfileNetworkMapping"
              }
            },
            "required": [
              "Name",
              "Attacks",
              "ObjectivesAndTimeline",
              "DefaultNetworkMapping"
            ],
            "type": "object"
          }
        ]
      },
      "AttackTimelineSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineSegmentBase"
          },
          {
            "properties": {
              "AttackRate": {
                "description": "The attack rate of the attack (default: 1).",
                "format": "int64",
                "maximum": "1000000000",
                "minimum": "1",
                "type": "integer",
                "x-auto": "default(1)"
              },
              "ConnectionGracefulStopTimeout": {
                "description": "The time the test will wait all connections to be graceful stopped (default: 15 seconds).",
                "format": "int64",
                "maximum": "2160000",
                "minimum": "1",
                "type": "integer",
                "x-auto": "default(120)"
              },
              "IterationCount": {
                "description": "The number of iterations to run (default: 1).",
                "format": "int64",
                "maximum": "1",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(1)"
              },
              "MaxConcurrentAttack": {
                "description": "The maximum number of concurrent attacks (default: 1).",
                "format": "int64",
                "maximum": "1000000000",
                "minimum": "1",
                "type": "integer",
                "x-auto": "default(1)"
              }
            },
            "required": [
              "MaxConcurrentAttack",
              "AttackRate"
            ],
            "type": "object"
          }
        ]
      },
      "AttackTrack": {
        "properties": {
          "Actions": {
            "items": {
              "$ref": "#/components/schemas/AttackAction"
            },
            "type": "array",
            "x-delete": "*,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "*"
          },
          "add-actions": {
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array",
            "x-operation": "true",
            "x-post": "-,CreateAttackAction"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Actions"
        ],
        "type": "object"
      },
      "AuthMethodType": {
        "description": "The authentication method for TLS VPN tunnels.",
        "enum": [
          "AAA",
          "AAA-CERTIFICATE",
          "CERTIFICATE"
        ],
        "type": "string"
      },
      "AuthProfile": {
        "properties": {
          "Connections": {
            "description": "The connections included in the flow",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "readOnly": "true",
            "type": "array"
          },
          "DataTypes": {
            "description": "The data types definition of the parameters",
            "items": {
              "$ref": "#/components/schemas/DataType"
            },
            "type": "array"
          },
          "Endpoints": {
            "description": "The list of endpoints used by the authentication profile",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            },
            "readOnly": "true",
            "type": "array"
          },
          "FileName": {
            "description": "The name of the XML file that contains the authentication profile definition",
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "Parameters": {
            "description": "The parameters of the authentication profile",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "readOnly": "true",
            "type": "array"
          },
          "description": {
            "description": "The user friendly description of the Auth Profile",
            "readOnly": "true",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the profile",
            "readOnly": "true",
            "type": "string"
          },
          "type": {
            "description": "The type of the authentication profile",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthSettings": {
        "properties": {
          "AuthMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthMethodType"
              }
            ],
            "x-auto": "default(AAA)"
          },
          "AuthParam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-auto": "default(method(GetDefaultAuthParam))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "CertificateFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The authentication certificate file of the VPN tunnel.",
            "x-auto": "default(method(GetDefaultCertificateFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "KeyFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The authentication key file of the VPN tunnel.",
            "x-auto": "default(method(GetDefaultKeyFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "KeyFilePassword": {
            "description": "The key file password of the TLS VPN authentication.",
            "maxLength": "200",
            "type": "string"
          },
          "Passwords": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "PasswordsParam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "Usernames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "UsernamesParam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "type": "object"
      },
      "AuthenticationSettings": {
        "properties": {
          "AuthMethod": {
            "enum": [
              "PRE-SHARED-KEY",
              "CERTIFICATES"
            ],
            "type": "string",
            "x-auto": "default(PRE-SHARED-KEY)",
            "x-readonly": "false"
          },
          "CertificateFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The authentication certificate file of the IPsec tunnel(s).",
            "x-auto": "default(method(GetDefaultCertificateFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "KeyFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The authentication key file of the IPsec tunnel(s).",
            "x-auto": "default(method(GetDefaultKeyFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "KeyFilePassword": {
            "description": "The key file password of the IPsec authentication.",
            "maxLength": "200",
            "type": "string"
          },
          "SharedKey": {
            "maxLength": "4096",
            "type": "string",
            "x-auto": "default(ipsec)"
          }
        },
        "required": [
          "AuthMethod",
          "SharedKey"
        ],
        "type": "object"
      },
      "AutomaticIpType": {
        "enum": [
          "BOTH_IPV4_IPV6",
          "ONLY_IPV4",
          "ONLY_IPV6"
        ],
        "type": "string"
      },
      "Broker": {
        "properties": {
          "connectionStatus": {
            "description": "The broker's connection status",
            "type": "string"
          },
          "fingerprint": {
            "description": "The broker's fingerprint",
            "type": "string"
          },
          "host": {
            "description": "The IP or hostname of the registered broker",
            "maxLength": "200",
            "readOnly": "true",
            "type": "string"
          },
          "hostName": {
            "description": "The IP or hostname of the registered broker",
            "maxLength": "200",
            "readOnly": "true",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the broker",
            "readOnly": "true",
            "type": "string"
          },
          "interactiveFingerprintVerification": {
            "description": "Validate the broker's fingerprint interactively",
            "type": "boolean"
          },
          "password": {
            "description": "The broker's authentication password",
            "type": "string"
          },
          "prettyConnStatus": {
            "description": "The broker's connection status in human readable format",
            "type": "string"
          },
          "trustNew": {
            "description": "The flag used to skip broker's identity verifications",
            "type": "boolean"
          },
          "user": {
            "description": "The broker's authentication user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaptureSettings": {
        "description": "The capture settings for an agent",
        "properties": {
          "captureEnabled": {
            "description": "The enable status of the capture configuration (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "captureLatestPackets": {
            "description": "Capture first or latest packets (true to enable latest packets capture).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "logLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogLevel"
              }
            ],
            "description": "Log level options: NONE, ERROR, WARN, INFO, DEBUG, TRACE (default: INFO)",
            "x-auto": "default(INFO)"
          },
          "maxCaptureSize": {
            "description": "The maximum capture size in bytes (default: 104857600).",
            "format": "int64",
            "maximum": "2147483648",
            "minimum": "1048576",
            "type": "integer",
            "x-auto": "default(104857600)"
          }
        },
        "required": [
          "captureEnabled",
          "logLevel"
        ],
        "type": "object"
      },
      "Category": {
        "properties": {
          "name": {
            "description": "The name of the category",
            "type": "string"
          },
          "values": {
            "description": "The values of the category",
            "items": {
              "$ref": "#/components/schemas/CategoryValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CategoryFilter": {
        "properties": {
          "category": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CategoryValue": {
        "properties": {
          "itemsCount": {
            "description": "The number of items associated with the category value",
            "type": "integer"
          },
          "value": {
            "description": "One value of the category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertConfig": {
        "properties": {
          "certificateFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The certificate file of the TLS profile.",
            "x-auto": "default(method(GetDefaultCertificateFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "dhFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-auto": "default(method(GetDefaultDhFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "isPlaylist": {
            "type": "boolean",
            "x-auto": "default(false)"
          },
          "keyFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The key file of the TLS profile.",
            "x-auto": "default(method(GetDefaultKeyFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "keyFilePassword": {
            "description": "The key file password of the TLS profile.",
            "maxLength": "200",
            "type": "string",
            "x-auto": "default(appsec)"
          },
          "playlistColumnName": {
            "type": "string"
          },
          "playlistFilename": {
            "type": "string"
          },
          "sniHostname": {
            "description": "The SNI hostname associated with the certificate. (default: generic.keysight.io).",
            "maxLength": "256",
            "type": "string",
            "x-auto": "default(generic.keysight.io)"
          }
        },
        "required": [
          "dhFile",
          "certificateFile",
          "keyFile",
          "sniHostname",
          "id"
        ],
        "type": "object"
      },
      "Choice": {
        "properties": {
          "Description": {
            "type": "string"
          },
          "Hidden": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CipherTLS12": {
        "description": "The cipher of the TLS profile (default: AES256-GCM-SHA384).",
        "enum": [
          "ECDHE-RSA-AES256-GCM-SHA384",
          "AES256-GCM-SHA384",
          "AES256-SHA256",
          "AES128-SHA",
          "AES256-SHA",
          "AES128-GCM-SHA256",
          "ECDHE-RSA-AES256-SHA384",
          "ECDHE-RSA-AES256-SHA",
          "ECDHE-RSA-AES128-SHA256",
          "ECDHE-RSA-AES128-GCM-SHA256",
          "ECDHE-RSA-AES128-SHA",
          "DHE-RSA-AES256-SHA256",
          "DHE-RSA-AES256-SHA",
          "DHE-RSA-AES128-SHA",
          "ECDHE-ECDSA-AES128-SHA",
          "ECDHE-ECDSA-AES256-GCM-SHA384",
          "ECDHE-ECDSA-AES128-SHA256",
          "ECDHE-ECDSA-AES128-GCM-SHA256",
          "ECDHE-ECDSA-AES256-SHA384",
          "ECDHE-RSA-CHACHA20-POLY1305",
          "DHE-RSA-CHACHA20-POLY1305",
          "ECDHE-ECDSA-CHACHA20-POLY1305"
        ],
        "type": "string",
        "x-auto": "default(AES256-GCM-SHA384)"
      },
      "CipherTLS13": {
        "description": "The cipher of the TLSv1.3 profile (default: AES-256-GCM-SHA384).",
        "enum": [
          "AES-256-GCM-SHA384",
          "CHACHA20-POLY1305-SHA256",
          "AES-128-GCM-SHA256"
        ],
        "type": "string",
        "x-auto": "default(AES-256-GCM-SHA384)"
      },
      "CiscoAnyConnectSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TunnelSettings"
          },
          {
            "properties": {
              "CiscoEncapsulation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CiscoEncapsulation"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "ConnectionProfiles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "ESPProbeRetryTimeout": {
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(60)"
              },
              "ESPProbeTimeout": {
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(65)"
              },
              "OuterTLSClientProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfileCiscoSettings))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "VPNGateway": {
                "pattern": "^$|(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-\\_]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-\\_]*[A-Za-z0-9])$|^(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-fA-F]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,1}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,2}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,3}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:[0-9a-fA-F]{1,4})):)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,4}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,5}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,6}(?:(?:[0-9a-fA-F]{1,4})))?::))))$)",
                "type": "string"
              }
            },
            "required": [
              "CiscoEncapsulation",
              "VPNGateway",
              "ConnectionProfiles"
            ],
            "type": "object"
          }
        ]
      },
      "CiscoEncapsulation": {
        "properties": {
          "DTLSEnabled": {
            "type": "boolean",
            "x-auto": "default(True)",
            "x-readonly": "false"
          },
          "DTLSSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DTLSSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "EncapsulationMode": {
            "description": "The encapsulation mode for inner traffic.",
            "enum": [
              "DTLS",
              "TLS"
            ],
            "type": "string",
            "x-auto": "default(DTLS)"
          },
          "UdpPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(1024)"
          }
        },
        "required": [
          "DTLSEnabled",
          "DTLSSettings",
          "UdpPort",
          "EncapsulationMode"
        ],
        "type": "object"
      },
      "Command": {
        "properties": {
          "ActionID": {
            "description": "The internal ID of the command",
            "readOnly": "true",
            "type": "string"
          },
          "Description": {
            "description": "The description of the command",
            "type": "string"
          },
          "Exchanges": {
            "description": "The exchanges of the command",
            "items": {
              "$ref": "#/components/schemas/Exchange"
            },
            "type": "array"
          },
          "IsStrike": {
            "description": "Indicates if the command is a strike",
            "readOnly": "true",
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "Name": {
            "description": "The name of the command",
            "readOnly": "true",
            "type": "string"
          },
          "Parameters": {
            "description": "The parameters of the command",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Config": {
        "description": "The test configuration",
        "properties": {
          "AttackProfiles": {
            "items": {
              "$ref": "#/components/schemas/AttackProfile"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "CustomDashboards": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomDashboards"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ExpectedDiskSpace": {
            "items": {
              "$ref": "#/components/schemas/ExpectedDiskSpace"
            },
            "type": "array",
            "x-get": "*",
            "x-multiplicity": "required"
          },
          "NetworkProfiles": {
            "items": {
              "$ref": "#/components/schemas/NetworkProfile"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "TrafficProfiles": {
            "items": {
              "$ref": "#/components/schemas/ApplicationProfile"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          }
        },
        "required": [
          "NetworkProfiles",
          "TrafficProfiles",
          "AttackProfiles",
          "ExpectedDiskSpace",
          "CustomDashboards",
          "ValidationReport"
        ],
        "type": "object"
      },
      "ConfigCategory": {
        "properties": {
          "displayName": {
            "description": "The user-visible name of the configuration category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigId": {
        "properties": {
          "id": {
            "description": "The ID of the configuration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigMetadata": {
        "properties": {
          "application": {
            "type": "string"
          },
          "configData": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "description": "The actual configuration object",
            "type": "object"
          },
          "configUrl": {
            "description": "The backend URL of the saved config data",
            "type": "string"
          },
          "createdOn": {
            "description": "A Unix timestamp that indicates when config was created",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "displayName": {
            "description": "The user-visible name of the configuration",
            "maxLength": "200",
            "type": "string"
          },
          "encodedFiles": {
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the configuration",
            "readOnly": "true",
            "type": "string"
          },
          "lastAccessed": {
            "description": "A Unix timestamp that indicates when config was last opened or modified",
            "format": "int64",
            "type": "integer"
          },
          "lastModified": {
            "description": "A Unix timestamp that indicates when config was last modified",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "linkedResources": {
            "items": {
              "$ref": "#/components/schemas/APILink"
            },
            "type": "array"
          },
          "owner": {
            "description": "A user-friendly display name of the config's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the config's owner",
            "readOnly": "true",
            "type": "string"
          },
          "readonly": {
            "description": "Indicates if the configuration can be modified.",
            "readOnly": "true",
            "type": "boolean"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags used for categorizing configs",
            "type": "object"
          },
          "type": {
            "description": "The type of config",
            "readOnly": "true",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "Conflict": {
        "properties": {
          "Name": {
            "type": "string"
          },
          "PathToTarget": {
            "type": "string"
          },
          "PathVars": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "required": [
          "Name",
          "PathToTarget",
          "PathVars"
        ],
        "type": "object"
      },
      "Connection": {
        "properties": {
          "ClientEndpoint": {
            "description": "The client endpoint of the connection.",
            "type": "string",
            "x-readonly": "true"
          },
          "ClientPort": {
            "description": "The client port of the connection (default: 80).",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(80)"
          },
          "ClosingEnd": {
            "type": "string"
          },
          "DisableEncryption": {
            "description": "If true, the connection will be unencrypted regardless of other TLS settings.",
            "type": "boolean",
            "x-auto": "default(false)"
          },
          "Hostname": {
            "description": "The hostname associated with the connection. (default: generic.keysight.io).",
            "maxLength": "256",
            "type": "string",
            "x-auto": "default(generic.keysight.io)"
          },
          "HostnameParam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The hostname associated with the connection. (default: generic.keysight.io).",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "HttpForwardProxyMode": {
            "description": "Deprecated. This is ignored and the proxy mode will be deduced from the connection type.",
            "enum": [
              "INHERIT_DUT",
              "PROXY_MODE",
              "TUNNEL_MODE"
            ],
            "type": "string",
            "x-auto": "default(INHERIT_DUT)",
            "x-deprecated": "true"
          },
          "IsDeprecated": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "MaxTransactions": {
            "description": "The maximum number of transactions for this connection.",
            "format": "int32",
            "maximum": "64000",
            "minimum": "0",
            "type": "integer"
          },
          "Name": {
            "description": "The name of the Connection.",
            "maxLength": "200",
            "type": "string",
            "x-readonly": "true"
          },
          "PortSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PortSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "Readonly": {
            "description": "If true, the connection can't be modified by the user.",
            "type": "boolean",
            "x-auto": "default(false)",
            "x-readonly": "true"
          },
          "ReadonlyHostname": {
            "description": "If true, the connection hostname will be readonly.",
            "type": "boolean",
            "x-auto": "default(false)",
            "x-readonly": "true"
          },
          "ReadonlyMaxTrans": {
            "description": "If true, MaxTransactions will be readonly",
            "type": "boolean",
            "x-readonly": "true"
          },
          "ReadonlyType": {
            "description": "If true or missing, the type of the connection cannot be changed",
            "type": "boolean"
          },
          "ServerEndpoint": {
            "description": "The server endpoint of the connection.",
            "type": "string",
            "x-readonly": "true"
          },
          "ServerPort": {
            "description": "The server port of the connection (default: 80).",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(80)"
          },
          "Type": {
            "enum": [
              "http",
              "https",
              "tcp",
              "tls",
              "udp",
              "ssl"
            ],
            "type": "string",
            "x-auto": "default(http)"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "ClientPort",
          "ServerPort",
          "MaxTransactions",
          "ClientEndpoint",
          "ServerEndpoint",
          "Name"
        ],
        "type": "object"
      },
      "ConnectionPersistence": {
        "enum": [
          "ConnectionPersistenceStandard",
          "ConnectionPersistenceEnabled",
          "ConnectionPersistenceDisabled"
        ],
        "type": "string"
      },
      "Consumer": {
        "properties": {
          "id": {
            "description": "The consumer type - either logs or diagnostics",
            "readOnly": "true",
            "type": "string"
          },
          "prettySize": {
            "description": "The logs or diagnostics size in human-readable format",
            "readOnly": "true",
            "type": "string"
          },
          "size": {
            "description": "The logs or diagnostics size (in bytes)",
            "readOnly": "true",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CustomDashboards": {
        "properties": {
          "Active": {
            "description": "Indicates whether the custom dashboards are enabled or not.",
            "type": "boolean",
            "x-auto": "default(false)"
          },
          "Links": {
            "description": "A list of links to user defined stats dashboards.",
            "items": {
              "$ref": "#/components/schemas/APILink"
            },
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-post": "*"
          }
        },
        "required": [
          "Active",
          "Links"
        ],
        "type": "object"
      },
      "CustomImportHandler": {
        "properties": {
          "link": {
            "$ref": "#/components/schemas/APILink"
          },
          "name": {
            "description": "The name of the custom import config operation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomStat": {
        "properties": {
          "Function": {
            "description": "The function of the custom statistic",
            "type": "string"
          },
          "Path": {
            "description": "The path of the custom statistic",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DNSResolver": {
        "properties": {
          "cacheTimeout": {
            "description": "The cached timeout for the DNS Resolver",
            "format": "int32",
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer"
          },
          "enablePerconnect": {
            "description": "The enable perconnection value.",
            "type": "boolean"
          },
          "nameServers": {
            "description": "A list of name servers.",
            "items": {
              "$ref": "#/components/schemas/NameServer"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "*,*"
          }
        },
        "type": "object"
      },
      "DNSServer": {
        "properties": {
          "Enabled": {
            "description": "A flag indicating if the servers should listen for DNS requests (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "Port": {
            "description": "The port that the DNS server should listen on. (default: 53)",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(53)"
          }
        },
        "required": [
          "Enabled",
          "Port"
        ],
        "type": "object"
      },
      "DTLSSettings": {
        "properties": {
          "TLSClientProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TLSProfile"
              }
            ],
            "x-auto": "default(method(GetDefaultClientTlsProfileDTLSSettings))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "UDPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UdpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "UDPProfile",
          "TLSClientProfile"
        ],
        "type": "object"
      },
      "DUTNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkSegmentBase"
          },
          {
            "description": "The configuration for DUT",
            "properties": {
              "ClientDUTActive": {
                "type": "boolean",
                "x-auto": "default(false)",
                "x-description": "A flag indicating if the client DUT is an active device. If it is, the simulated clients will send traffic to the client DUT 'host'. (default: false)"
              },
              "ClientDUTHost": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Host"
                  }
                ],
                "x-description": "The hostname where the traffic goes if client DUT is active."
              },
              "ClientDUTPort": {
                "description": "The listen port for client-side DUT (default: 80).",
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(80)"
              },
              "ConfigSettings": {
                "enum": [
                  "SIMPLE_MODE",
                  "ADVANCED_MODE"
                ],
                "type": "string",
                "x-auto": "default(SIMPLE_MODE)"
              },
              "ForwardProxyPepDUT": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PepDUT"
                  }
                ],
                "x-auto": "default(method(GetDefaultPEPDut))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "ForwardProxyPepDUTActive": {
                "description": "A flag indicating if the PEP device is an active device. If active, the simulated clients will send traffic to the PEP device host. (default: false)",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "HTTPHealthCheck": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HealthCheckConfig"
                  }
                ],
                "description": "The HTTP HealthCheck configuration for DUT",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "HTTPSHealthCheck": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HealthCheckConfig"
                  }
                ],
                "description": "The HTTPS HealthCheck configuration for DUT",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "HostnameSuffix": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Host"
                  }
                ],
                "description": "A suffix to be added to the Host header of all Apps/Attacks running through the forward proxy DUT (default: empty string)."
              },
              "HttpForwardProxyMode": {
                "description": "Deprecated. This is ignored and the proxy mode will be deduced from the connection type.",
                "enum": [
                  "PROXY_MODE",
                  "TUNNEL_MODE"
                ],
                "type": "string",
                "x-auto": "default(PROXY_MODE)",
                "x-deprecated": "true"
              },
              "NonProxiedHosts": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Params"
                  }
                ],
                "x-auto": "default(method(GetDefaultNonProxiedHosts))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "PepDUT": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PepDUT"
                  }
                ],
                "x-auto": "default(method(GetDefaultPEPDut))",
                "x-deprecated": "true",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "PepDUTActive": {
                "description": "A flag indicating if the PEP device is an active device. If active, the simulated clients will send traffic to the PEP device host. (default: false)",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "ReverseProxyPepDUT": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PepDUT"
                  }
                ],
                "x-auto": "default(method(GetDefaultPEPDut))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "ReverseProxyPepDUTActive": {
                "description": "A flag indicating if the PEP device is an active device. If active, the simulated clients will send traffic to the PEP device host. (default: false)",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "ServerDUTActive": {
                "description": "A flag indicating if the server DUT is an active device. If it is, the simulated clients or client DUT(if active) will send traffic to the server DUT 'host'; and the simulated servers will use the healtcheck configurations. (default: false)",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "ServerDUTHost": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Host"
                  }
                ],
                "description": "The hostname where the traffic goes if server DUT is active."
              },
              "ServerDUTPort": {
                "description": "The listen port for server-side DUT",
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer"
              },
              "TCPHealthCheck": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HealthCheckConfig"
                  }
                ],
                "description": "The TCP HealthCheck configuration for DUT",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "UseRealHost": {
                "description": "A flag indicating if tunneled hostname should use real domain names.",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "active": {
                "description": "A flag indicating if the server DUT is an active device. If it is, the simulated clients or client DUT(if active) will send traffic to the DUT 'host'; and the simulated servers will use the healtcheck configurations. (default: false)",
                "type": "boolean",
                "x-auto": "default(false)"
              },
              "host": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Host"
                  }
                ],
                "description": "The hostname where the traffic goes if server DUT is active."
              }
            },
            "required": [
              "HTTPHealthCheck",
              "HTTPSHealthCheck",
              "TCPHealthCheck",
              "active"
            ],
            "type": "object"
          }
        ]
      },
      "Dashboard": {
        "properties": {
          "id": {
            "description": "The identifier of the dashboard",
            "type": "string"
          },
          "name": {
            "description": "The name of the dashboard",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataType": {
        "properties": {
          "Values": {
            "description": "A list of parameters for this data type.",
            "items": {
              "properties": {
                "id": {
                  "description": "The name of the parameter.",
                  "type": "string"
                },
                "valueType": {
                  "description": "The default value of the parameter.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "type": "object"
      },
      "Definition": {
        "properties": {
          "xml": {
            "description": "The XML definition of the application",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DhP1Group": {
        "enum": [
          "MODP 768",
          "MODP 1024",
          "MODP 1536",
          "MODP 2048",
          "MODP 3072",
          "MODP 4096",
          "MODP 6144",
          "MODP 8192",
          "MODP 1024 S160",
          "MODP 2048 S224",
          "MODP 2048 S256",
          "ECP 192",
          "ECP 224",
          "ECP 256",
          "ECP 384",
          "ECP 521",
          "ECP 224 BP",
          "ECP 256 BP",
          "ECP 384 BP",
          "ECP 512 BP",
          "PH1-MODP-768",
          "PH1-MODP-1024",
          "PH1-MODP-1536",
          "PH1-MODP-2048",
          "PH1-MODP-3072",
          "PH1-MODP-4096",
          "PH1-MODP-6144",
          "PH1-MODP-8192",
          "PH1-MODP-1024-S160",
          "PH1-MODP-2048-S224",
          "PH1-MODP-2048-S256",
          "PH1-ECP-192",
          "PH1-ECP-224",
          "PH1-ECP-256",
          "PH1-ECP-384",
          "PH1-ECP-521",
          "PH1-ECP-224-BP",
          "PH1-ECP-256-BP",
          "PH1-ECP-384-BP",
          "PH1-ECP-512-BP"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P1_MODP_768",
          "P1_MODP_1024",
          "P1_MODP_1536",
          "P1_MODP_2048",
          "P1_MODP_3072",
          "P1_MODP_4096",
          "P1_MODP_6144",
          "P1_MODP_8192",
          "P1_MODP_1024_S160",
          "P1_MODP_2048_S224",
          "P1_MODP_2048_S256",
          "P1_ECP_192",
          "P1_ECP_224",
          "P1_ECP_256",
          "P1_ECP_384",
          "P1_ECP_521",
          "P1_ECP_224_BP",
          "P1_ECP_256_BP",
          "P1_ECP_384_BP",
          "P1_ECP_512_BP"
        ]
      },
      "DiagnosticComponent": {
        "description": "Object that holds the diagnostic component metadata.",
        "properties": {
          "componentName": {
            "description": "The name of the diagnostic component.",
            "type": "string"
          },
          "options": {
            "description": "The list of diagnostic options.",
            "items": {
              "$ref": "#/components/schemas/DiagnosticOptions"
            },
            "type": "array"
          },
          "subComponents": {
            "description": "The list of subordinated diagnostic components.",
            "items": {
              "$ref": "#/components/schemas/DiagnosticComponent"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DiagnosticComponentContext": {
        "properties": {
          "componentList": {
            "description": "A list of components and subcomponents.",
            "items": {
              "$ref": "#/components/schemas/DiagnosticComponent"
            },
            "type": "array"
          },
          "context": {
            "description": "Additional information about the caller or about the case where the operation was called.",
            "items": {
              "$ref": "#/components/schemas/DiagnosticOptions"
            },
            "type": "array"
          }
        },
        "required": [
          "componentList"
        ],
        "type": "object"
      },
      "DiagnosticOptions": {
        "description": "Object that holds a diagnostic component option.",
        "properties": {
          "name": {
            "description": "The name of the diagnostic component option.",
            "type": "string"
          },
          "value": {
            "description": "The value of the diagnostic component option.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiskUsage": {
        "properties": {
          "available": {
            "description": "The currently available disk space (in bytes)",
            "readOnly": "true",
            "type": "integer"
          },
          "consumers": {
            "description": "A list of consumers for handling logs and diagnostics storage",
            "items": {
              "$ref": "#/components/schemas/Consumer"
            },
            "type": "array"
          },
          "criticalDiskSpace": {
            "description": "A flag indicating whether disk space is critical i.e the application may become unstable",
            "readOnly": "true",
            "type": "boolean"
          },
          "lowDiskSpace": {
            "description": "A flag indicating whether disk space is low",
            "readOnly": "true",
            "type": "boolean"
          },
          "message": {
            "description": "A user-friendly message about disk usage",
            "readOnly": "true",
            "type": "string"
          },
          "prettyAvailable": {
            "description": "The currently available disk space in human-readable format",
            "readOnly": "true",
            "type": "string"
          },
          "prettySize": {
            "description": "The total disk size in human-readable format",
            "readOnly": "true",
            "type": "string"
          },
          "size": {
            "description": "The total disk size (in bytes)",
            "readOnly": "true",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DummyObject": {
        "type": "object"
      },
      "ESPOverUDPSettings": {
        "properties": {
          "UDPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UdpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "UDPProfile"
        ],
        "type": "object"
      },
      "EffectivePorts": {
        "properties": {
          "EffectiveDestinationPort": {
            "type": "string",
            "x-readonly": "true"
          },
          "EffectiveForwardProxyPort": {
            "type": "string",
            "x-readonly": "true"
          },
          "EffectiveServerPort": {
            "type": "string",
            "x-readonly": "true"
          }
        },
        "required": [
          "EffectiveDestinationPort",
          "EffectiveServerPort"
        ],
        "type": "object"
      },
      "EmulatedRouter": {
        "properties": {
          "EmulatedRouterRanges": {
            "items": {
              "$ref": "#/components/schemas/EmulatedRouterRange"
            },
            "maxItems": "2",
            "type": "array",
            "x-auto": "default(items(2))",
            "x-delete": "-,-",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "-",
            "x-put": "-,-"
          },
          "Enabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          }
        },
        "required": [
          "Enabled",
          "EmulatedRouterRanges"
        ]
      },
      "EmulatedRouterRange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IPRange"
          },
          {
            "properties": {
              "Mss": {
                "description": "The maximum segment size of the TCP header.",
                "format": "int32",
                "maximum": "65495",
                "minimum": "36",
                "type": "integer",
                "x-auto": "default(1460)",
                "x-deprecated": "true"
              },
              "MssAuto": {
                "description": "A flag indicating if Mss settings for the IPRange should be determined automatically (default: false).",
                "type": "boolean",
                "x-auto": "default(False)",
                "x-deprecated": "true"
              }
            },
            "required": [
              "IpRangeName",
              "IpAuto",
              "GwAuto",
              "NetMaskAuto",
              "IpVer",
              "MssAuto",
              "Mss",
              "id"
            ],
            "type": "object",
            "x-multiplicity": "list"
          }
        ]
      },
      "EmulatedSubnetConfig": {
        "description": "The Inner IP Range assigned to the current test configuration",
        "properties": {
          "HostCountPerTunnel": {
            "format": "int32",
            "maximum": "65534",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "HostsIncrement": {
            "description": "The IP incrementation rule (default: 0.0.0.1).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.1)"
          },
          "HostsPrefix": {
            "description": "The network mask of the IP Range (default: 16).",
            "format": "int32",
            "maximum": "128",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(32)"
          },
          "Increment": {
            "description": "The IP incrementation rule (default: 0.0.1.0).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.1.0)"
          },
          "Prefix": {
            "description": "The network mask of the IP Range (default: 16).",
            "format": "int32",
            "maximum": "128",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(24)"
          },
          "Start": {
            "description": "The start IP for the IPRange (default: 10.0.0.10).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(10.0.0.10)"
          },
          "TotalHostCount": {
            "type": "string",
            "x-auto": "default(0)",
            "x-readonly": "true"
          },
          "networkTags": {
            "$ref": "#/components/schemas/TagList"
          }
        },
        "required": [
          "Start",
          "Increment",
          "Prefix",
          "HostsPrefix",
          "HostsIncrement",
          "HostCountPerTunnel",
          "TotalHostCount",
          "networkTags"
        ],
        "type": "object"
      },
      "EncP1Algorithm": {
        "enum": [
          "DES CBC",
          "DES CBC3",
          "AES128 CBC",
          "AES192 CBC",
          "AES256 CBC",
          "AES128 GCM ICV8",
          "AES192 GCM ICV8",
          "AES256 GCM ICV8",
          "AES128 GCM ICV12",
          "AES192 GCM ICV12",
          "AES256 GCM ICV12",
          "AES128 GCM ICV16",
          "AES192 GCM ICV16",
          "AES256 GCM ICV16",
          "DES-CBC",
          "PH1-DES-CBC-3",
          "PH1-AES128-CBC",
          "PH1-AES192-CBC",
          "PH1-AES256-CBC",
          "PH1-AES128-GCM-ICV-8",
          "PH1-AES192-GCM-ICV-8",
          "PH1-AES256-GCM-ICV-8",
          "PH1-AES128-GCM-ICV-12",
          "PH1-AES192-GCM-ICV-12",
          "PH1-AES256-GCM-ICV-12",
          "PH1-AES128-GCM-ICV-16",
          "PH1-AES192-GCM-ICV-16",
          "PH1-AES256-GCM-ICV-16"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P1_DES_CBC",
          "P1_DES_CBC_3",
          "P1_AES128_CBC",
          "P1_AES192_CBC",
          "P1_AES256_CBC",
          "P1_AES128_GCM_ICV_8",
          "P1_AES192_GCM_ICV_8",
          "P1_AES256_GCM_ICV_8",
          "P1_AES128_GCM_ICV_12",
          "P1_AES192_GCM_ICV_12",
          "P1_AES256_GCM_ICV_12",
          "P1_AES128_GCM_ICV_16",
          "P1_AES192_GCM_ICV_16",
          "P1_AES256_GCM_ICV_16"
        ]
      },
      "EncP2Algorithm": {
        "enum": [
          "NONE",
          "AES128 CBC",
          "AES192 CBC",
          "AES256 CBC",
          "AES128 GCM ICV8",
          "AES192 GCM ICV8",
          "AES256 GCM ICV8",
          "AES128 GCM ICV12",
          "AES192 GCM ICV12",
          "AES256 GCM ICV12",
          "AES128 GCM ICV16",
          "AES192 GCM ICV16",
          "AES256 GCM ICV16",
          "ENC-NONE",
          "PH2-AES128-CBC",
          "PH2-AES192-CBC",
          "PH2-AES256-CBC",
          "PH2-AES128-GCM-ICV-8",
          "PH2-AES192-GCM-ICV-8",
          "PH2-AES256-GCM-ICV-8",
          "PH2-AES128-GCM-ICV-12",
          "PH2-AES192-GCM-ICV-12",
          "PH2-AES256-GCM-ICV-12",
          "PH2-AES128-GCM-ICV-16",
          "PH2-AES192-GCM-ICV-16",
          "PH2-AES256-GCM-ICV-16"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P2_NONE",
          "P2_AES128_CBC",
          "P2_AES192_CBC",
          "P2_AES256_CBC",
          "P2_AES128_GCM_ICV_8",
          "P2_AES192_GCM_ICV_8",
          "P2_AES256_GCM_ICV_8",
          "P2_AES128_GCM_ICV_12",
          "P2_AES192_GCM_ICV_12",
          "P2_AES256_GCM_ICV_12",
          "P2_AES128_GCM_ICV_16",
          "P2_AES192_GCM_ICV_16",
          "P2_AES256_GCM_ICV_16"
        ]
      },
      "Endpoint": {
        "properties": {
          "Name": {
            "type": "string",
            "x-readonly": "true"
          },
          "NetworkMapping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkMapping"
              }
            ],
            "description": "The per-endpoint network mapping. Depending on Endpoint type, only ClientNetworkTags or ServerNetworkTags will be used.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "UpdateEndpointNetworkMapping"
          },
          "Type": {
            "enum": [
              "Client",
              "Server"
            ],
            "type": "string",
            "x-readonly": "true"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Name",
          "Type",
          "NetworkMapping"
        ],
        "type": "object"
      },
      "Enum": {
        "properties": {
          "Choices": {
            "description": "The constant values accepted by the enum",
            "items": {
              "$ref": "#/components/schemas/Choice"
            },
            "type": "array"
          },
          "Default": {
            "description": "The default value of the enum",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorResponse": {
        "description": "REST API error response",
        "properties": {
          "message": {
              "description":  "The error message",
              "type": "string"
          }
        },
        "type": "object"
      },
      "EthRange": {
        "description": "The Ethernet Ranges assigned to the current test configuration",
        "properties": {
          "Count": {
            "format": "int32",
            "maximum": "10000000",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(10)"
          },
          "MacAuto": {
            "description": "A flag indicating if the MAC address for the EthRange should be determined automatically (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "MacIncr": {
            "description": "The MAC address increment rule for the EthRange (default: 00:00:00:00:00:01).",
            "pattern": "^$|(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)",
            "type": "string",
            "x-auto": "default(00:00:00:00:00:01)"
          },
          "MacStart": {
            "description": "The MAC start address for the EthRange (default: 01:02:03:04:05:06).",
            "pattern": "^$|(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)",
            "type": "string",
            "x-auto": "default(01:02:03:04:05:06)"
          },
          "OneMacPerIP": {
            "description": "A flag indicating if there is only one MAC address for the EthRange per IPRange (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "StaticARPTable": {
            "items": {
              "$ref": "#/components/schemas/StaticARPEntry"
            },
            "type": "array",
            "x-auto": "default(items(0))",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "*,*"
          },
          "maxCountPerAgent": {
            "description": "The maximum number of MACs that should be assigned to each traffic agent for this Ethernet range segment in a valid test (default: 0, split equally between agents).",
            "format": "int32",
            "maximum": "10000000",
            "minimum": "0",
            "type": "integer"
          }
        },
        "required": [
          "MacAuto",
          "OneMacPerIP"
        ],
        "x-multiplicity": "list"
      },
      "Exchange": {
        "properties": {
          "ClientEndpoint": {
            "description": "The client's endpoint for exchange.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the exchange.",
            "maxLength": "200",
            "type": "string"
          },
          "ServerEndpoint": {
            "description": "The server's endpoint for exchange.",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ExpectedDiskSpace": {
        "properties": {
          "message": {
            "properties": {
              "perMinute": {
                "description": "User friendly message with the expected disk size per agent per minute",
                "type": "string"
              },
              "perSecond": {
                "description": "User friendly message with the expected disk size per agent per second",
                "type": "string"
              },
              "total": {
                "description": "User friendly message with the total expected disk size per agent",
                "type": "string"
              }
            },
            "required": [
              "total",
              "perMinute",
              "perSecond"
            ],
            "type": "object"
          },
          "prettySize": {
            "properties": {
              "perMinute": {
                "description": "Total expected disk size per agent per minute in human-readable form",
                "type": "string"
              },
              "perSecond": {
                "description": "Total expected disk size per agent per second in human-readable form",
                "type": "string"
              },
              "total": {
                "description": "Total expected disk size per agent in human-readable form",
                "type": "string"
              }
            },
            "required": [
              "total",
              "perMinute",
              "perSecond"
            ],
            "type": "object"
          },
          "size": {
            "properties": {
              "perMinute": {
                "description": "Expected disk size that will be used by the current configuration per agent per minute",
                "format": "int64",
                "type": "integer"
              },
              "perSecond": {
                "description": "Expected disk size that will be used by the current configuration per agent per second",
                "format": "int64",
                "type": "integer"
              },
              "total": {
                "description": "Total expected disk size that will be used by the current configuration per agent",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "total",
              "perMinute",
              "perSecond"
            ],
            "type": "object"
          }
        },
        "required": [
          "size",
          "prettySize",
          "message"
        ],
        "type": "object"
      },
      "ExportAllOperation": {
        "properties": {
          "configIds": {
            "description": "An optional list of configs to be include. All are included if the list is empty.",
            "items": {
              "$ref": "#/components/schemas/ConfigId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExportFilesOperationInput": {
        "properties": {
          "exportFilesRequestsByAgent": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ExportFilesRequest"
              },
              "type": "array"
            },
            "type": "object"
          },
          "timeout": {
            "description": "Maximum waiting time in seconds to complete the agent file export operation",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ExportFilesRequest": {
        "properties": {
          "agentId": {
            "description": "The ID of the agent",
            "type": "string"
          },
          "requiredFileTypes": {
            "$ref": "#/components/schemas/RequiredFileTypes"
          },
          "uploadLocation": {
            "description": "The URL to which the agent will send its exported files via a POST request",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportPackageOperation": {
        "properties": {
          "configs": {
            "type": "boolean"
          },
          "externalNatsBrokers": {
            "type": "boolean"
          },
          "keycloak": {
            "type": "boolean"
          },
          "licenseServers": {
            "type": "boolean"
          },
          "results": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExternalResourceInfo": {
        "properties": {
          "externalResourceURL": {
            "description": "The id of the attack resource",
            "type": "string"
          }
        },
        "type": "object"
      },
      "F5Encapsulation": {
        "properties": {
          "EncapsulationMode": {
            "description": "The encapsulation mode for inner traffic.",
            "enum": [
              "PPP_OVER_DTLS",
              "TLS"
            ],
            "type": "string",
            "x-auto": "default(PPP_OVER_DTLS)"
          },
          "PPPOverDTLSEnabled": {
            "type": "boolean",
            "x-auto": "default(True)",
            "x-readonly": "false"
          },
          "PPPOverDTLSSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DTLSSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "UdpPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(1024)"
          }
        },
        "required": [
          "PPPOverDTLSEnabled",
          "PPPOverDTLSSettings",
          "UdpPort",
          "EncapsulationMode"
        ],
        "type": "object"
      },
      "F5Settings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TunnelSettings"
          },
          {
            "properties": {
              "F5Encapsulation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/F5Encapsulation"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "OuterTLSClientProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfileF5Settings))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "VPNGateway": {
                "pattern": "^$|(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-\\_]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-\\_]*[A-Za-z0-9])$|^(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-fA-F]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,1}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,2}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,3}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:[0-9a-fA-F]{1,4})):)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,4}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,5}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,6}(?:(?:[0-9a-fA-F]{1,4})))?::))))$)",
                "type": "string"
              }
            },
            "required": [
              "F5Encapsulation",
              "VPNGateway"
            ],
            "type": "object"
          }
        ]
      },
      "FileMetadata": {
        "properties": {
          "userVisible": {
            "description": "A flag indicating if the file is user-visible or not",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FileValue": {
        "properties": {
          "fileName": {
            "description": "The name of the file.",
            "type": "string"
          },
          "payload": {
            "description": "The payload value of the file.",
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array"
          },
          "resourceURL": {
            "description": "The resource URL of the file.",
            "type": "string"
          },
          "value": {
            "description": "Selected column name of the file (playlist type).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Filter": {
        "properties": {
          "name": {
            "description": "The filter name",
            "type": "string"
          },
          "value": {
            "description": "The filter value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilteredStat": {
        "properties": {
          "filters": {
            "description": "The filters that will be applied to the corresponding stat view",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the stat view",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FortinetEncapsulation": {
        "properties": {
          "EncapsulationMode": {
            "description": "The encapsulation mode for inner traffic.",
            "enum": [
              "PPP_OVER_DTLS",
              "TLS"
            ],
            "type": "string",
            "x-auto": "default(PPP_OVER_DTLS)"
          },
          "PPPOverDTLSEnabled": {
            "type": "boolean",
            "x-auto": "default(True)",
            "x-readonly": "false"
          },
          "PPPOverDTLSSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DTLSSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "UdpPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(1024)"
          }
        },
        "required": [
          "PPPOverDTLSEnabled",
          "PPPOverDTLSSettings",
          "UdpPort",
          "EncapsulationMode"
        ],
        "type": "object"
      },
      "FortinetSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TunnelSettings"
          },
          {
            "properties": {
              "FortinetEncapsulation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FortinetEncapsulation"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "OuterTLSClientProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfileFortinetSettings))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "VPNGateway": {
                "pattern": "^$|(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-\\_]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-\\_]*[A-Za-z0-9])$|^(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-fA-F]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,1}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,2}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,3}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:[0-9a-fA-F]{1,4})):)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,4}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,5}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,6}(?:(?:[0-9a-fA-F]{1,4})))?::))))$)",
                "type": "string"
              }
            },
            "required": [
              "FortinetEncapsulation",
              "VPNGateway"
            ],
            "type": "object"
          }
        ]
      },
      "GenerateAllOperation": {
        "properties": {
          "timezoneOffset": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GenerateCSVReportsOperation": {
        "properties": {
          "forceGenerate": {
            "description": "Generate a new CSV report replacing the cached one",
            "type": "boolean"
          },
          "from": {
            "description": "(optional) UNIX time in milliseconds or milliseconds from the test start (based on useRelativeTime flag) as the query interval start. Defaults to 'now-5m' (in milliseconds) for false useRelativeTime, and 0 otherwise.",
            "type": "string"
          },
          "interval": {
            "description": "(optional) The interval used to aggregate the statistics snapshots",
            "type": "string"
          },
          "stats": {
            "description": "The stat views for which a CSV report will be generated",
            "items": {
              "$ref": "#/components/schemas/FilteredStat"
            },
            "type": "array"
          },
          "to": {
            "description": "(optional) UNIX time in milliseconds or milliseconds from the test start (based on useRelativeTime flag) as the query interval end. Defaults to 'now-7s' (in milliseconds).",
            "type": "string"
          },
          "useRelativeTime": {
            "description": "(optional) Specifies if the from/to params use milliseconds from test start or UNIX time in milliseconds.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GeneratePDFReportOperation": {
        "properties": {
          "forceGenerate": {
            "description": "Generate a new PDF report replacing the cached one",
            "type": "boolean"
          },
          "timezoneOffset": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GenericFile": {
        "properties": {
          "content": {
            "description": "The content of the file",
            "format": "byte",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the file",
            "readOnly": "true",
            "type": "string"
          },
          "md5": {
            "description": "The md5 value of the file",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/FileMetadata"
          },
          "name": {
            "description": "The name of the file",
            "type": "string"
          },
          "options": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "description": "The characteristics of the file",
            "type": "object"
          },
          "owner": {
            "description": "The user-visible name of the file's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the file's owner",
            "readOnly": "true",
            "type": "string"
          },
          "referenceLinks": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object"
          },
          "size": {
            "description": "The size of the file",
            "type": "integer"
          },
          "type": {
            "description": "The type of file",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetAttacksOperation": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/CategoryFilter"
            },
            "type": "array"
          },
          "filterMode": {
            "type": "string"
          },
          "searchCol": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "searchVal": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "skip": {
            "type": "string"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/SortBodyField"
            },
            "type": "array"
          },
          "take": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetCategoriesOperation": {
        "properties": {
          "filter": {
            "items": {
              "$ref": "#/components/schemas/CategoryFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetStrikesOperation": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/CategoryFilter"
            },
            "type": "array"
          },
          "compatibleWith": {
            "type": "string"
          },
          "filterMode": {
            "type": "string"
          },
          "searchCol": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "searchVal": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "skip": {
            "type": "string"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/SortBodyField"
            },
            "type": "array"
          },
          "take": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPProfile": {
        "properties": {
          "AdditionalHeaders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ConnectionPersistence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConnectionPersistence"
              }
            ]
          },
          "ConnectionsMaxTransactions": {
            "description": "The maximum number of transactions for all scenario connections.",
            "format": "int32",
            "maximum": "64000",
            "minimum": "0",
            "type": "integer"
          },
          "Description": {
            "description": "The description of the HTTP profile.",
            "type": "string"
          },
          "ExternalResourceURL": {
            "description": "The external resource URL of the HTTP profile.",
            "type": "string"
          },
          "HTTPVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HTTPVersion"
              }
            ]
          },
          "Headers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IsModified": {
            "type": "boolean"
          },
          "Name": {
            "description": "The name of the HTTP profile.",
            "type": "string"
          },
          "Params": {
            "description": "The list of parameters present in the HTTP profile.",
            "items": {
              "$ref": "#/components/schemas/Params"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-put": "-,*"
          },
          "UseApplicationServerHeaders": {
            "type": "boolean"
          }
        },
        "required": [
          "Name",
          "Description",
          "Params",
          "ExternalResourceURL",
          "IsModified"
        ],
        "type": "object"
      },
      "HTTPVersion": {
        "enum": [
          "HTTP11",
          "HTTP10",
          "HTTP20"
        ],
        "type": "string"
      },
      "HashP1Algorithm": {
        "enum": [
          "HMAC MD5",
          "HMAC SHA1",
          "AES XCBC",
          "HMAC SHA256",
          "HMAC SHA384",
          "HMAC SHA512",
          "P1-HASH-HMAC-MD5",
          "HASH-HMAC-SHA1",
          "HASH-AES-XCBC",
          "HASH-HMAC-SHA256",
          "HASH-HMAC-SHA384",
          "HASH-HMAC-SHA512"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P1_HMAC_MD5",
          "P1_HMAC_SHA1",
          "P1_AES_XCBC",
          "P1_HMAC_SHA256",
          "P1_HMAC_SHA384",
          "P1_HMAC_SHA512"
        ]
      },
      "HashP2Algorithm": {
        "enum": [
          "HMAC MD5 96",
          "HMAC SHA1 96",
          "HMAC SHA256 128",
          "HMAC SHA384 192",
          "HMAC SHA512 256",
          "HMAC-MD5-96",
          "HMAC-SHA1-96",
          "HMAC-SHA256-128",
          "HMAC-SHA384-192",
          "HMAC-SHA512-256"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P2_HMAC_MD5_96",
          "P2_HMAC_SHA1_96",
          "P2_HMAC_SHA256_128",
          "P2_HMAC_SHA384_192",
          "P2_HMAC_SHA512_256"
        ]
      },
      "HealthCheckConfig": {
        "description": "The HealthCheck configuration for DUT",
        "properties": {
          "Enabled": {
            "description": "A flag indicating if the servers should listen for HealthCheck requests (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "Params": {
            "description": "A list of additional parameters for the HealthCheck.",
            "items": {
              "$ref": "#/components/schemas/Params"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-put": "-,*"
          },
          "Port": {
            "description": "The port that the DUT will send HealthCheck requests to the simulated servers. (default: 80)",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(80)"
          }
        },
        "required": [
          "Port"
        ],
        "type": "object"
      },
      "Host": {
        "pattern": "^$|^(([a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|(^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
        "type": "string"
      },
      "ID": {
        "type": "string",
        "x-auto": "increment",
        "x-id": "true"
      },
      "IPNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkSegmentBase"
          },
          {
            "properties": {
              "DNSResolver": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DNSResolver"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "DNSServer": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DNSServer"
                  }
                ],
                "description": "The DNS Server configuration for Network Segment",
                "x-auto": "default(method(GetDefaultDNSServer))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "DUTConnections": {
                "description": "The connected DUT network segments.",
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": "true"
              },
              "EmulatedRouter": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmulatedRouter"
                  }
                ],
                "type": "object",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "EthRange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EthRange"
                  }
                ],
                "type": "object",
                "x-auto": "default(method(GetDefaultEthRange))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "IPRanges": {
                "items": {
                  "$ref": "#/components/schemas/IPRange"
                },
                "type": "array",
                "x-auto": "default(items(1))",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "*,*"
              },
              "IPSecStacks": {
                "items": {
                  "$ref": "#/components/schemas/IPSecStack"
                },
                "maxItems": "1",
                "type": "array",
                "x-auto": "default(items(0))",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "*,*"
              },
              "TunnelStacks": {
                "items": {
                  "$ref": "#/components/schemas/TunnelStack"
                },
                "maxItems": "1",
                "type": "array",
                "x-auto": "default(items(0))",
                "x-delete": "-,*",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "*,*"
              },
              "active": {
                "description": "A flag indicating if the network segment is active.(default: true)",
                "type": "boolean",
                "x-auto": "default(true)"
              },
              "agentAssignments": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AgentAssignments"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "id": {
                "$ref": "#/components/schemas/ID"
              },
              "minAgents": {
                "description": "The minimum number of agents that should be assigned to this network segment in a valid test (default: 1).",
                "format": "int32",
                "maximum": "1000000",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(1)"
              }
            },
            "required": [
              "id",
              "IPRanges",
              "TunnelStacks",
              "IPSecStacks",
              "EmulatedRouter"
            ],
            "type": "object"
          }
        ],
        "description": "The IP network configuration"
      },
      "IPRange": {
        "description": "The IP Ranges assigned to the current test configuration",
        "properties": {
          "AutomaticIpType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutomaticIpType"
              }
            ],
            "description": "The automatic IP types, either 'ONLY_IPV4', 'ONLY_IPV6' or 'BOTH_IPV4_IPV6'.",
            "x-auto": "default(ONLY_IPV4)"
          },
          "Count": {
            "description": "The number of IPs generated (default: 1).",
            "format": "int32",
            "maximum": "10000000",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "GwAuto": {
            "description": "A flag indicating if the gateway settings for the IPRange should be determined automatically (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "GwStart": {
            "description": "The gateway start IP for the IPRange (default: 10.0.0.1).",
            "minLength": "1",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(10.0.0.1)"
          },
          "InnerVlanRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VLANRange"
              }
            ],
            "description": "The inner VLAN range assigned to the current IP range configuration",
            "x-auto": "default(method(GetDefaultVlanRange))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IpAuto": {
            "description": "A flag indicating if IP settings for the IPRange should be determined automatically (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "IpIncr": {
            "description": "The IP incrementation rule (default: 0.0.0.1).",
            "minLength": "1",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.1)"
          },
          "IpRangeName": {
            "$ref": "#/components/schemas/Name"
          },
          "IpStart": {
            "description": "The start IP for the IPRange (default: 10.0.0.10).",
            "minLength": "1",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(10.0.0.10)"
          },
          "IpVer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IpVer"
              }
            ],
            "description": "The type of the IP. 'IPV4' and 'IPV6' are both supported currently.",
            "x-auto": "default(IPV4)"
          },
          "IsEmulatedRouter": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "Mss": {
            "description": "The maximum segment size of the TCP header.",
            "format": "int32",
            "maximum": "65495",
            "minimum": "36",
            "type": "integer",
            "x-auto": "default(1460)"
          },
          "MssAuto": {
            "description": "A flag indicating if Mss settings for the IPRange should be determined automatically (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "NetMask": {
            "description": "The network mask of the IP Range (default: 16).",
            "format": "int32",
            "maximum": "128",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(16)"
          },
          "NetMaskAuto": {
            "description": "A flag indicating if the network mask of the IPRange should be determined automatically (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "maxCountPerAgent": {
            "description": "The maximum number of IPs that should be assigned to each traffic agent for this IP range segment in a valid test (default: 1).",
            "format": "int32",
            "maximum": "10000000",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "networkTags": {
            "$ref": "#/components/schemas/TagList"
          }
        },
        "required": [
          "IpRangeName",
          "IpAuto",
          "GwAuto",
          "NetMaskAuto",
          "IpVer",
          "MssAuto",
          "Mss",
          "id"
        ],
        "type": "object",
        "x-multiplicity": "list"
      },
      "IPSecRange": {
        "properties": {
          "AuthSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IKEPhase1Config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/P1Config"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IKEPhase2Config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/P2Config"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IPSecRangeName": {
            "$ref": "#/components/schemas/Name"
          },
          "MultiP2OverP1": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "ProtectedSubConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProtectedSubnetConfig"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "PublicPeer": {
            "pattern": "^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)",
            "type": "string"
          },
          "PublicPeerIncrement": {
            "pattern": "^$|(^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$)",
            "type": "string",
            "x-auto": "default(0.0.0.0)"
          },
          "RemoteAccess": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RemoteAccess"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "TestScenario": {
            "enum": [
              "REMOTE-ACCESS",
              "SITE-TO-SITE"
            ],
            "type": "string",
            "x-auto": "default(SITE-TO-SITE)"
          },
          "Timers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timers"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "TunnelCountPerOuterIP": {
            "format": "int32",
            "type": "integer",
            "x-auto": "default(1)",
            "x-readonly": "true"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "IPSecRangeName",
          "TestScenario",
          "PublicPeer",
          "PublicPeerIncrement",
          "TunnelCountPerOuterIP",
          "MultiP2OverP1",
          "ProtectedSubConfig",
          "AuthSettings",
          "IKEPhase1Config",
          "IKEPhase2Config",
          "RemoteAccess",
          "Timers"
        ],
        "type": "object"
      },
      "IPSecStack": {
        "properties": {
          "CACertificateFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The authentication CA certificate file of the IPsec tunnel(s).",
            "x-auto": "default(method(GetDefaultCACertificateFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "EmulatedSubConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmulatedSubnetConfig"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "EnableRekey": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "IPSecRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPSecRange"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IPSecStackName": {
            "$ref": "#/components/schemas/Name"
          },
          "LogKeys": {
            "type": "boolean"
          },
          "MaxInitiationRate": {
            "format": "int32",
            "maximum": "1000000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "MaxPending": {
            "format": "int32",
            "maximum": "1000000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "OuterIPRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPRange"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "RekeyMargin": {
            "format": "int32",
            "maximum": "3600",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(10)"
          },
          "RekeyRetryCount": {
            "format": "int32",
            "maximum": "100000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(3)"
          },
          "RetransmissionTimeout": {
            "format": "int32",
            "maximum": "600",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(30)"
          },
          "RetryCount": {
            "format": "int32",
            "maximum": "100000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "RetryInterval": {
            "format": "int32",
            "maximum": "60",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(10)"
          },
          "RetryIntervalIncrement": {
            "format": "int32",
            "maximum": "60",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "SetupTimeout": {
            "format": "int32",
            "maximum": "600",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(30)"
          },
          "StackRole": {
            "enum": [
              "INITIATOR",
              "RESPONDER"
            ],
            "type": "string",
            "x-auto": "default(INITIATOR)"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "IPSecStackName",
          "StackRole",
          "EmulatedSubConfig",
          "IPSecRange",
          "MaxInitiationRate",
          "MaxPending",
          "EnableRekey",
          "RekeyRetryCount",
          "RekeyMargin",
          "LogKeys",
          "SetupTimeout",
          "RetransmissionTimeout",
          "RetryCount",
          "RetryInterval",
          "RetryIntervalIncrement",
          "OuterIPRange"
        ],
        "type": "object"
      },
      "IdPSignatureAlgo": {
        "enum": [
          "SHA256_SIGN",
          "SHA1_SIGN"
        ],
        "type": "string",
        "x-default": "default(SHA256_SIGN)",
        "x-enum-varnames": [
          "RSA_SHA256",
          "RSA_SHA1"
        ]
      },
      "ImportAllOperation": {
        "properties": {
          "configs": {
            "description": "The list of configurations to be imported",
            "items": {
              "$ref": "#/components/schemas/ConfigMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IngestOperation": {
        "properties": {
          "pluginStats": {
            "$ref": "#/components/schemas/PluginStats"
          }
        },
        "type": "object"
      },
      "InnerIPRange": {
        "description": "The Inner IP Range assigned to the current test configuration",
        "properties": {
          "networkTags": {
            "$ref": "#/components/schemas/TagList"
          }
        },
        "type": "object"
      },
      "Interface": {
        "properties": {
          "Gateway": {
            "description": "The gateway address of the interface",
            "readOnly": "true",
            "type": "string"
          },
          "IP": {
            "description": "The list of IP addresses",
            "items": {
              "$ref": "#/components/schemas/IpMask"
            },
            "readOnly": "true",
            "type": "array"
          },
          "MTU": {
            "description": "The maximum transmission unit of the interface",
            "format": "int32",
            "readOnly": "true",
            "type": "integer"
          },
          "Mac": {
            "description": "The MAC address of the interface",
            "readOnly": "true",
            "type": "string"
          },
          "Name": {
            "description": "The name of the interface",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpMask": {
        "properties": {
          "IP": {
            "readOnly": "true",
            "type": "string"
          },
          "NetMask": {
            "format": "int32",
            "readOnly": "true",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IpPreference": {
        "enum": [
          "IPV4_ONLY",
          "IPV6_ONLY",
          "BOTH_IPV4_FIRST",
          "BOTH_IPV6_FIRST",
          "IP_PREF_MAX"
        ],
        "type": "string"
      },
      "IpVer": {
        "enum": [
          "IPV4",
          "IPV6"
        ],
        "type": "string"
      },
      "LicenseServerMetadata": {
        "properties": {
          "connectionStatus": {
            "description": "The license server's connection status",
            "readOnly": "true",
            "type": "string"
          },
          "fingerprint": {
            "description": "The license server's fingerprint",
            "type": "string"
          },
          "hostName": {
            "description": "The hostname/IP of the server",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the license server",
            "format": "int32",
            "readOnly": "true",
            "type": "integer"
          },
          "interactiveFingerprintVerification": {
            "description": "Validate the license's server fingerprint interactively",
            "type": "boolean"
          },
          "password": {
            "description": "The license server's authentication password",
            "type": "string"
          },
          "prettyConnStatus": {
            "description": "The license server's connection status in a human-readable format",
            "readOnly": "true",
            "type": "string"
          },
          "trustNew": {
            "description": "The flag used to skip license server's identity verifications",
            "type": "boolean"
          },
          "tunnelHostName": {
            "description": "The hostname/IP of the license server tunnel",
            "readOnly": "true",
            "type": "string"
          },
          "user": {
            "description": "The license server's authentication user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoadConfigOperation": {
        "properties": {
          "configUrl": {
            "description": "The URL of the configuration that should be loaded",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogConfig": {
        "properties": {
          "level": {
            "description": "The current global log level",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogLevel": {
        "enum": [
          "NONE",
          "INFO",
          "TRACE"
        ],
        "type": "string"
      },
      "MarkedAsDeleted": {
        "properties": {
          "deleteProgress": {
            "description": "The progress of the result deletion",
            "readOnly": "true",
            "type": "integer"
          },
          "value": {
            "description": "The flag that indicates if the result was marked as deleted",
            "readOnly": "true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MediaFile": {
        "properties": {
          "FileValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileValue"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-post": "*"
          },
          "MediaTracks": {
            "items": {
              "$ref": "#/components/schemas/MediaTrack"
            },
            "type": "array",
            "x-delete": "*,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "*,*",
            "x-post": "*",
            "x-put": "*,*"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "FileValue"
        ],
        "type": "object"
      },
      "MediaTrack": {
        "properties": {
          "Bitrate": {
            "type": "integer"
          },
          "BitrateKbps": {
            "type": "integer"
          },
          "Codec": {
            "type": "string"
          },
          "CodecDescription": {
            "type": "string"
          },
          "TrackId": {
            "type": "string"
          },
          "TrackType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrackType"
              }
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "TrackId",
          "TrackType"
        ],
        "type": "object"
      },
      "Metadata": {
        "properties": {
          "AuthMethod": {
            "$ref": "#/components/schemas/Enum"
          },
          "ExplicitProxy": {
            "description": "This is an authentication profile used along with an explicit proxy",
            "type": "boolean"
          },
          "IDPType": {
            "$ref": "#/components/schemas/Enum"
          },
          "SGWName": {
            "description": "The name of the secure gateway",
            "type": "string"
          },
          "SGWType": {
            "description": "The type of the secure gateway",
            "type": "string"
          },
          "SGWTypeValue": {
            "description": "The agent secure gateway type value of the secure gateway type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MosMode": {
        "enum": [
          "DISABLED",
          "PER_INTERVAL",
          "PER_CALL"
        ],
        "type": "string"
      },
      "Name": {
        "maxLength": "200",
        "pattern": "^$|^[^\"\\\\]+$",
        "type": "string",
        "x-auto": "name"
      },
      "NameIdFormat": {
        "enum": [
          "emailAddress"
        ],
        "type": "string",
        "x-default": "default(emailAddress)",
        "x-enum-varnames": [
          "EMAIL_ADDRESS"
        ]
      },
      "NameServer": {
        "properties": {
          "name": {
            "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkMapping": {
        "properties": {
          "ClientNetworkTags": {
            "description": "A list of tags of Network Segments which serve as clients. (default: Client)",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": "true",
            "x-auto": "default(Client)"
          },
          "ExcludedDUTList": {
            "description": "A list of DUTs that are excluded from client-server network connections.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": "true"
          },
          "ServerNetworkTags": {
            "description": "A list of tags of Network Segments which serve as servers. (default: Server)",
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": "true",
            "x-auto": "default(Server)"
          }
        },
        "required": [
          "ClientNetworkTags",
          "ServerNetworkTags"
        ],
        "type": "object"
      },
      "NetworkProfile": {
        "description": "The networks assigned to the current test configuration",
        "properties": {
          "DUTNetworkSegment": {
            "items": {
              "$ref": "#/components/schemas/DUTNetwork"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "IPNetworkSegment": {
            "items": {
              "$ref": "#/components/schemas/IPNetwork"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "IPNetworkSegment",
          "DUTNetworkSegment",
          "id"
        ],
        "type": "object",
        "x-multiplicity": "required"
      },
      "NetworkSegmentBase": {
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/Name"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "networkTags": {
            "$ref": "#/components/schemas/TagList"
          }
        },
        "required": [
          "Name",
          "id"
        ],
        "type": "object",
        "x-multiplicity": "required"
      },
      "Notification": {
        "properties": {
          "alerting": {
            "description": "A flag indicating if the current notification should raise an alert",
            "readOnly": "true",
            "type": "boolean"
          },
          "id": {
            "description": "The unique identifier of the notification",
            "readOnly": "true",
            "type": "string"
          },
          "message": {
            "description": "A user friendly notification message",
            "readOnly": "true",
            "type": "string"
          },
          "owner": {
            "description": "The friendly display name of the entity that created the notification",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the entity that created the notification",
            "readOnly": "true",
            "type": "string"
          },
          "seen": {
            "description": "A flag indicating if the current notification was already seen by an end user. Notifications that have been seen are automatically filtered.",
            "readOnly": "true",
            "type": "boolean"
          },
          "severity": {
            "description": "The severity of the notification",
            "readOnly": "true",
            "type": "string"
          },
          "sticky": {
            "description": "A flag indicating that the current notification should not be automatically dismissed or hidden after a certain period",
            "readOnly": "true",
            "type": "boolean"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A list of custom tags that provide additional information about the notification",
            "readOnly": "true",
            "type": "object"
          },
          "timestamp": {
            "description": "A Unix timestamp that indicates when the notification was generated",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotificationCounts": {
        "properties": {
          "all": {
            "description": "The number of notifications, regardless of their type",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "error": {
            "description": "The number of error notifications",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "info": {
            "description": "The number of informational messages",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "warning": {
            "description": "The number of warnings",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NtpInfo": {
        "properties": {
          "activeServer": {
            "description": "Active NTP server",
            "readOnly": "true",
            "type": "string"
          },
          "servers": {
            "description": "NTP servers defined in the systemd-timesyncd configuration file",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "NTP sync status",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectiveType": {
        "enum": [
          "Simulated users",
          "Throughput",
          "Connections per second",
          "Flow rate",
          "Concurrent connections"
        ],
        "type": "string",
        "x-enum-varnames": [
          "SIMULATED_USERS",
          "THROUGHPUT",
          "CONNECTIONS_PER_SECOND",
          "FLOW_RATE",
          "CONCURRENT_CONNECTIONS"
        ]
      },
      "ObjectiveUnit": {
        "enum": [
          "",
          "bps"
        ],
        "type": "string",
        "x-enum-varnames": [
          "EMPTY_UNIT",
          "BPS"
        ],
        "x-newEmpty": "true"
      },
      "ObjectiveValueEntry": {
        "properties": {
          "Unit": {
            "description": "The unit of the Objective.",
            "type": "string"
          },
          "Value": {
            "description": "The value of the Objective.",
            "format": "float",
            "minimum": "0",
            "type": "number"
          },
          "id": {
            "description": "The ID of the objective.",
            "type": "string",
            "x-id": "true"
          }
        },
        "required": [
          "id",
          "Value"
        ],
        "type": "object"
      },
      "ObjectivesAndTimeline": {
        "properties": {
          "AdvancedSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdvancedSettings"
              }
            ],
            "x-auto": "default(AgentOptimizationMode:BALANCED_MODE, WarmUpPeriod:0)",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "PrimaryObjective": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpecificObjective"
              }
            ],
            "x-auto": "default(Type:Throughput,Id:0,Unit:bps)",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "SecondaryObjective": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecondaryObjective"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "SecondaryObjectives": {
            "description": "Deprecated. Use SecondaryObjective instead.",
            "items": {
              "$ref": "#/components/schemas/SpecificObjective"
            },
            "maxItems": "1",
            "type": "array",
            "x-auto": "default(items(1))",
            "x-delete": "-,*",
            "x-deprecated": "true",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "TimelineSegments": {
            "description": "Deprecated. Use PrimaryObjective.Timeline instead.",
            "items": {
              "$ref": "#/components/schemas/TimelineSegment"
            },
            "type": "array",
            "x-auto": "default(items(1))",
            "x-delete": "-,*",
            "x-deprecated": "true",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          }
        },
        "required": [
          "PrimaryObjective",
          "SecondaryObjective"
        ],
        "type": "object"
      },
      "OpenAPIDefinitions": {
        "properties": {
          "openApiDefinitions": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "description": "The OpenAPI definitions for CyPerf data model",
            "type": "object"
          }
        },
        "type": "object"
      },
      "P1Config": {
        "properties": {
          "DHGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DhP1Group"
              }
            ],
            "x-auto": "default(MODP 1024)"
          },
          "EncAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncP1Algorithm"
              }
            ],
            "x-auto": "default(AES128 CBC)"
          },
          "HashAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HashP1Algorithm"
              }
            ],
            "x-auto": "default(HMAC SHA1)"
          },
          "InitialContact": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "Lifetime": {
            "format": "int32",
            "maximum": "31557600",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(28800)"
          },
          "PrfAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PrfP1Algorithm"
              }
            ],
            "x-auto": "default(HMAC SHA1)"
          }
        },
        "required": [
          "Lifetime",
          "EncAlgorithm",
          "HashAlgorithm",
          "DHGroup",
          "PrfAlgorithm",
          "InitialContact"
        ],
        "type": "object"
      },
      "P2Config": {
        "properties": {
          "EncAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncP2Algorithm"
              }
            ],
            "x-auto": "default(AES128 CBC)"
          },
          "HashAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HashP2Algorithm"
              }
            ],
            "x-auto": "default(HMAC SHA1 96)"
          },
          "Lifetime": {
            "format": "int32",
            "maximum": "31557600",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(3600)"
          },
          "NatEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "PfsEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "PfsGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PfsP2Group"
              }
            ],
            "x-auto": "default(MODP 1024)"
          }
        },
        "required": [
          "Lifetime",
          "EncAlgorithm",
          "HashAlgorithm",
          "PfsEnabled",
          "PfsGroup",
          "NatEnabled"
        ],
        "type": "object"
      },
      "PANGPEncapsulation": {
        "properties": {
          "ESPOverUDPEnabled": {
            "type": "boolean",
            "x-auto": "default(True)",
            "x-readonly": "false"
          },
          "ESPOverUDPSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ESPOverUDPSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "EncapsulationMode": {
            "description": "The encapsulation mode for inner traffic.",
            "enum": [
              "ESP_OVER_UDP",
              "TLS"
            ],
            "type": "string",
            "x-auto": "default(ESP_OVER_UDP)"
          },
          "UdpPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(1024)"
          }
        },
        "required": [
          "ESPOverUDPEnabled",
          "ESPOverUDPSettings",
          "UdpPort",
          "EncapsulationMode"
        ],
        "type": "object"
      },
      "PANGPSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TunnelSettings"
          },
          {
            "properties": {
              "ESPProbeRetryTimeout": {
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(60)"
              },
              "ESPProbeTimeout": {
                "format": "int32",
                "maximum": "65535",
                "minimum": "0",
                "type": "integer",
                "x-auto": "default(65)"
              },
              "IsPortal": {
                "description": "A flag indicating if the tunnel is connected to PAN Portal instead of a direct connection to the PAN GP VPN Gateway (default: true).",
                "type": "boolean",
                "x-auto": "default(True)"
              },
              "OuterTLSClientProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSProfile"
                  }
                ],
                "x-auto": "default(method(GetDefaultClientTlsProfilePangpSettings))",
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "PANGPEncapsulation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PANGPEncapsulation"
                  }
                ],
                "x-get": "*",
                "x-multiplicity": "required",
                "x-patch": "*",
                "x-put": "*"
              },
              "PortalHostname": {
                "pattern": "(^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9]))|(^$)|^((((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))))$",
                "type": "string"
              },
              "VPNGateway": {
                "type": "string"
              },
              "VPNGateways": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "PANGPEncapsulation",
              "VPNGateways",
              "PortalHostname",
              "AuthSettings"
            ],
            "type": "object"
          }
        ]
      },
      "Pair": {
        "properties": {
          "id": {
            "description": "The ID of the session meta pair",
            "type": "integer"
          },
          "key": {
            "description": "The key of the meta pair",
            "type": "string"
          },
          "value": {
            "description": "The value of the meta pair",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParamMetadata": {
        "properties": {
          "TypeInfo": {
            "properties": {
              "arrayV2": {
                "properties": {
                  "elements": {
                    "items": {
                      "properties": {
                        "id": {
                          "description": "The id of the element.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of the element.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "int": {
                "properties": {
                  "MaxValue": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "MinValue": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "media": {
                "properties": {
                  "TrackId": {
                    "type": "string"
                  },
                  "TrackType": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "string": {
                "properties": {
                  "Charset": {
                    "type": "string"
                  },
                  "MaxLength": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "MinLength": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ParamType": {
        "enum": [
          "playlist",
          "payload",
          "userInput",
          "array_v2",
          "bigstring",
          "tls-certificates",
          "tls-keys",
          "tls-dhs",
          "MediaProfile",
          "range",
          "int"
        ],
        "type": "string",
        "x-enum-varnames": [
          "PLAYLIST_TYPE",
          "PAYLOAD_TYPE",
          "INPUT_TYPE",
          "ARRAY_TYPE",
          "BIGSTRING_TYPE",
          "TLS_CERTIFICATE_TYPE",
          "TLS_KEY_TYPE",
          "TLS_DH_TYPE",
          "MEDIA_PROFILE_TYPE",
          "RANGE_TYPE",
          "INT_TYPE"
        ]
      },
      "Parameter": {
        "properties": {
          "DefaultArrayElements": {
            "description": "The default values of the parameter",
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "DefaultSource": {
            "description": "The default source of the parameter",
            "type": "string"
          },
          "DefaultValue": {
            "description": "The default value of the parameter",
            "type": "string"
          },
          "ElementType": {
            "description": "The type of elements in the values array",
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/ParameterMetadata"
          },
          "Sources": {
            "description": "The sources of the parameter",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Type": {
            "description": "The type of the parameter",
            "type": "string"
          },
          "field": {
            "description": "The name of the ES document field",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the parameter",
            "readOnly": "true",
            "type": "string"
          },
          "operator": {
            "description": "The operator that the parameter supports",
            "type": "string"
          },
          "queryParam": {
            "description": "The corresponding query param",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParameterMetadata": {
        "properties": {
          "Category": {
            "description": "The category associated with the parameter",
            "type": "string"
          },
          "CategoryIndex": {
            "description": "The position of the category in the category list",
            "format": "int32",
            "type": "integer"
          },
          "Default": {
            "description": "The default value of the parameter",
            "type": "string"
          },
          "Description": {
            "description": "The description of the parameter",
            "type": "string"
          },
          "DisplayName": {
            "description": "The user friendly name of the parameter",
            "type": "string"
          },
          "Enum": {
            "$ref": "#/components/schemas/Enum"
          },
          "FlowIdentifier": {
            "description": "If true, the value of this parameter is used to uniquely identify an application/attack",
            "type": "boolean"
          },
          "Input": {
            "description": "The input of the parameter",
            "type": "string"
          },
          "LegacyNames": {
            "description": "The names of the equivalent parameters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Mandatory": {
            "description": "The mandatory status of the parameter",
            "type": "boolean"
          },
          "Payload": {
            "$ref": "#/components/schemas/PayloadMetadata"
          },
          "Readonly": {
            "description": "The read-only status of the parameter",
            "type": "boolean"
          },
          "Shared": {
            "description": "The shared status of the parameter",
            "type": "boolean"
          },
          "Type": {
            "description": "The type of the parameter",
            "type": "string"
          },
          "TypeInfo": {
            "$ref": "#/components/schemas/TypeInfoMetadata"
          },
          "UniqueValue": {
            "description": "If true, the value of this parameter must be unique across all Applications/Actions",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Params": {
        "properties": {
          "ArrayElementType": {
            "description": "The type of the array elements.",
            "type": "string"
          },
          "ArrayElements": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "Category": {
            "description": "The category associated with the parameter",
            "type": "string",
            "x-readonly": "true"
          },
          "CategoryIndex": {
            "description": "The position of the category in the category list",
            "type": "integer",
            "x-readonly": "true"
          },
          "DeprecatedPreviousSource": {
            "description": "A value indicating that this parameter had a source that was deprecated",
            "type": "string",
            "x-readonly": "true"
          },
          "Description": {
            "description": "The description of the parameter",
            "type": "string"
          },
          "DictionaryValue": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The dictionary value of the parameter.",
            "type": "object"
          },
          "Enum": {
            "properties": {
              "Choices": {
                "items": {
                  "$ref": "#/components/schemas/Choice"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "FileValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileValue"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-post": "*"
          },
          "FlowIdentifier": {
            "description": "If true, the value of this parameter is used to uniquely identify an application/attack",
            "type": "boolean",
            "x-readonly": "true"
          },
          "IsDeprecated": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "IsModified": {
            "type": "boolean"
          },
          "MediaFiles": {
            "items": {
              "$ref": "#/components/schemas/MediaFile"
            },
            "type": "array",
            "x-delete": "*,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "*,*",
            "x-post": "*",
            "x-put": "*,*"
          },
          "Metadata": {
            "$ref": "#/components/schemas/ParamMetadata"
          },
          "Name": {
            "description": "The name of the parameter.",
            "type": "string"
          },
          "ParamId": {
            "description": "The id of the parameter.",
            "type": "string"
          },
          "Readonly": {
            "type": "boolean"
          },
          "Source": {
            "description": "The source of the parameter.",
            "type": "string"
          },
          "SupportedSources": {
            "description": "A list that indicates possible sources for the parameter",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-readonly": "true"
          },
          "Type": {
            "description": "The type of the parameter.",
            "type": "string"
          },
          "Value": {
            "description": "The value of the parameter.",
            "type": "string"
          },
          "file-upload": {
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array",
            "x-operation": "true",
            "x-post": "-,UploadFile"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "supportsDynamicPayload": {
            "description": "A value that indicates if the parameter can have dynamic payload.",
            "type": "boolean"
          },
          "uploadURL": {
            "description": "The URL where the file parameter content could be uploaded.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "IsDeprecated",
          "Readonly"
        ],
        "type": "object"
      },
      "PayloadMeta": {
        "properties": {
          "byteSize": {
            "type": "integer"
          },
          "contentFileURL": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "md5sum": {
            "type": "string"
          },
          "resourceURL": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PayloadMetadata": {
        "properties": {
          "FileExtension": {
            "description": "The extension of the file",
            "type": "string"
          },
          "FileName": {
            "description": "The path of the file",
            "type": "string"
          },
          "FileType": {
            "description": "The type of the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PepDUT": {
        "description": "The Policy Enforcement Point (PEP) device under test (also known as Zero Trust device)",
        "properties": {
          "AuthMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "AuthProfileParams": {
            "items": {
              "$ref": "#/components/schemas/Params"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-put": "-,*"
          },
          "AuthProfileType": {
            "type": "string"
          },
          "HostnameSuffix": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Host"
              }
            ],
            "description": "A suffix to be added to the Host header of all Apps/Attacks running through the DUT (default: empty string)."
          },
          "IDPType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IsExplicitProxy": {
            "description": "A flag indicating if PEP for the selected authentication profile is an explicit proxy",
            "type": "boolean"
          },
          "PEPHost": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Host"
              }
            ],
            "description": "The hostname where the traffic goes if PEP device is active."
          },
          "PEPPort": {
            "description": "The listen port for PEP DUT (default: 443).",
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(443)"
          },
          "SimulatedIdP": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SimulatedIdP"
              }
            ],
            "x-auto": "default(method(GetDefaultSimulatedIDP))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "AuthProfileType"
        ],
        "type": "object"
      },
      "PfsP2Group": {
        "enum": [
          "MODP 768",
          "MODP 1024",
          "MODP 1536",
          "MODP 2048",
          "MODP 3072",
          "MODP 4096",
          "MODP 6144",
          "MODP 8192",
          "MODP 1024 S160",
          "MODP 2048 S224",
          "MODP 2048 S256",
          "ECP 192",
          "ECP 224",
          "ECP 256",
          "ECP 384",
          "ECP 521",
          "ECP 224 BP",
          "ECP 256 BP",
          "ECP 384 BP",
          "ECP 512 BP",
          "PH2-MODP-768",
          "PH2-MODP-1024",
          "PH2-MODP-1536",
          "PH2-MODP-2048",
          "PH2-MODP-3072",
          "PH2-MODP-4096",
          "PH2-MODP-6144",
          "PH2-MODP-8192",
          "PH2-MODP-1024-S160",
          "PH2-MODP-2048-S224",
          "PH2-MODP-2048-S256",
          "PH2-ECP-192",
          "PH2-ECP-224",
          "PH2-ECP-256",
          "PH2-ECP-384",
          "PH2-ECP-521",
          "PH2-ECP-224-BP",
          "PH2-ECP-256-BP",
          "PH2-ECP-384-BP",
          "PH2-ECP-512-BP"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P2_MODP_768",
          "P2_MODP_1024",
          "P2_MODP_1536",
          "P2_MODP_2048",
          "P2_MODP_3072",
          "P2_MODP_4096",
          "P2_MODP_6144",
          "P2_MODP_8192",
          "P2_MODP_1024_S160",
          "P2_MODP_2048_S224",
          "P2_MODP_2048_S256",
          "P2_ECP_192",
          "P2_ECP_224",
          "P2_ECP_256",
          "P2_ECP_384",
          "P2_ECP_521",
          "P2_ECP_224_BP",
          "P2_ECP_256_BP",
          "P2_ECP_384_BP",
          "P2_ECP_512_BP"
        ]
      },
      "Plugin": {
        "properties": {
          "id": {
            "description": "The identifier of the plugin",
            "readOnly": "true",
            "type": "string"
          },
          "keys": {
            "description": "Statistics keys supported by the plugin",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the plugin",
            "type": "string"
          },
          "version": {
            "description": "The version of the plugin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PluginStats": {
        "properties": {
          "plugin": {
            "description": "The name of the plugin",
            "type": "string"
          },
          "stats": {
            "description": "The statistics to be ingested",
            "items": {
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "items": {},
                    "type": "array"
                  },
                  {
                    "type": "object"
                  }
                ]
              },
              "type": "object"
            },
            "type": "array"
          },
          "version": {
            "description": "The version of the plugin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PortSettings": {
        "properties": {
          "Automatic": {
            "type": "boolean"
          },
          "AutomaticDestinationPort": {
            "type": "boolean"
          },
          "AutomaticForwardProxyPort": {
            "type": "boolean"
          },
          "DestinationPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer"
          },
          "EffectivePorts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EffectivePorts"
              }
            ],
            "type": "object",
            "x-get": "GetEffectivePortsForConnection",
            "x-multiplicity": "required"
          },
          "ForwardProxyPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer"
          },
          "Readonly": {
            "description": "If true, the port can't be selected by the user",
            "type": "boolean",
            "x-readonly": "true"
          },
          "ServerListenPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer"
          }
        },
        "required": [
          "Automatic",
          "DestinationPort",
          "AutomaticDestinationPort",
          "ServerListenPort",
          "AutomaticForwardProxyPort",
          "ForwardProxyPort",
          "Readonly"
        ],
        "type": "object"
      },
      "PrfP1Algorithm": {
        "enum": [
          "HMAC MD5",
          "HMAC SHA1",
          "AES XCBC",
          "HMAC SHA256",
          "HMAC SHA384",
          "HMAC SHA512",
          "PRF-HMAC-MD5",
          "PRF-HMAC-SHA1",
          "PRF-AES-XCBC",
          "PRF-HMAC-SHA256",
          "PRF-HMAC-SHA384",
          "PRF-HMAC-SHA512"
        ],
        "type": "string",
        "x-enum-varnames": [
          "P1_PRF_HMAC_MD5",
          "P1_PRF_HMAC_SHA1",
          "P1_PRF_AES_XCBC",
          "P1_PRF_HMAC_SHA256",
          "P1_PRF_HMAC_SHA384",
          "P1_PRF_HMAC_SHA512"
        ]
      },
      "ProtectedSubnetConfig": {
        "properties": {
          "Automatic": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "HostsIncrement": {
            "description": "The increment to be used for enumerating all the emulated subnets of the phase 2 tunnels that belong to each phase 1 (default: 0.0.0.1).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.1)"
          },
          "HostsPrefix": {
            "description": "The Prefix specifies the length (in bits) of the subnet mask to be applied to all the addresses created in the range",
            "format": "int32",
            "maximum": "128",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(32)"
          },
          "Increment": {
            "description": "The increment to be used for enumerating all the emulated subnets in the range (default: 0.0.0.0).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.0)"
          },
          "Prefix": {
            "description": "The length (in bits) of the subnet mask to be applied to all the addresses created in the range.",
            "format": "int32",
            "maximum": "128",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(24)"
          },
          "SingleProtectedSubnet": {
            "type": "boolean"
          },
          "Start": {
            "description": "The base address for enumerating all the emulated subnets in the range",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.0)"
          }
        },
        "required": [
          "Automatic",
          "Start",
          "Prefix",
          "Increment",
          "HostsPrefix",
          "HostsIncrement",
          "SingleProtectedSubnet"
        ],
        "type": "object"
      },
      "RTPEncryptionMode": {
        "enum": [
          "ZOOM",
          "PLAINTEXT"
        ],
        "type": "string"
      },
      "RTPProfile": {
        "properties": {
          "EncryptionMode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RTPEncryptionMode"
              }
            ],
            "x-auto": "default(NONE)"
          },
          "MosMode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MosMode"
              }
            ],
            "x-auto": "default(PER_INTERVAL)"
          },
          "ProfileId": {
            "description": "The ID of the RTP profile (default: VoiceProfile).",
            "type": "string",
            "x-auto": "default(VoiceProfile)",
            "x-readonly": "true"
          }
        },
        "required": [
          "ProfileId",
          "MosMode",
          "EncryptionMode"
        ]
      },
      "RTPProfileMeta": {
        "properties": {
          "CustomHeaderLenOffset": {
            "description": "The offset where the custom header length field is present",
            "type": "integer"
          },
          "CustomHeaderLenSize": {
            "description": "The length of the custom header length field is present",
            "type": "integer"
          },
          "CustomHeaderSignature": {
            "description": "The signature of the custom header",
            "format": "byte",
            "type": "string"
          },
          "CustomHeaderSignatureOffset": {
            "description": "The offset where the custom header signature can be found",
            "type": "integer"
          },
          "CustomHeaderSize": {
            "description": "The max size of the custom header",
            "type": "integer"
          },
          "EncryptionMode": {
            "description": "The desired encryption mode",
            "type": "string"
          },
          "RequiresRTPProfile": {
            "description": "Indicates that this applicaiton type requires an RTP profile",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RebootOperationInput": {
        "properties": {
          "agents": {
            "description": "The list of agents to be rebooted",
            "items": {
              "$ref": "#/components/schemas/AgentToBeRebooted"
            },
            "type": "array"
          },
          "softReboot": {
            "description": "A flag indicating whether a soft reboot is preferred",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Reference": {
        "properties": {
          "Type": {
            "description": "The type of the reference",
            "type": "string"
          },
          "Value": {
            "description": "The value of the reference",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReleaseOperationInput": {
        "properties": {
          "agentsData": {
            "items": {
              "$ref": "#/components/schemas/AgentRelease"
            },
            "type": "array"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RemoteAccess": {
        "properties": {
          "ModeCfgIncrement": {
            "description": "The increment value for the ModeCfg address pool (default: 0.0.0.1).",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.1)"
          },
          "ModeCfgStart": {
            "description": "The base address to be used for the ModeCfg address pool",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string"
          },
          "ModeCfgSuffix": {
            "description": "The IP address suffix for the ModeCfg address pool(default: 0.0.0.1).",
            "format": "int32",
            "maximum": "24",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(24)"
          }
        },
        "required": [
          "ModeCfgIncrement",
          "ModeCfgSuffix"
        ],
        "type": "object"
      },
      "RequiredFileTypes": {
        "properties": {
          "csvs": {
            "description": "Include CSV files.",
            "type": "boolean"
          },
          "packetCapture": {
            "description": "Include packet capture.",
            "type": "boolean"
          },
          "syslog": {
            "description": "Include syslog.",
            "type": "boolean"
          },
          "trafficAgentLog": {
            "description": "Include traffic agent log.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReserveOperationInput": {
        "properties": {
          "agentsData": {
            "items": {
              "$ref": "#/components/schemas/AgentReservation"
            },
            "type": "array"
          },
          "force": {
            "type": "boolean"
          },
          "owner": {
            "type": "string"
          },
          "ownerId": {
            "type": "string"
          },
          "payloads": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PayloadMeta"
            },
            "type": "object"
          },
          "sessionId": {
            "type": "string"
          },
          "sessionName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResultFileMetadata": {
        "properties": {
          "fileId": {
            "description": "The file ID of the saved file, can be agentID",
            "readOnly": "true",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file associated with the result",
            "type": "string"
          },
          "id": {
            "description": "The unique ID of the saved result",
            "readOnly": "true",
            "type": "string"
          },
          "lastModified": {
            "description": "The time when the result was last modified",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "resultId": {
            "description": "The unique ID of the saved result",
            "readOnly": "true",
            "type": "string"
          },
          "type": {
            "description": "Represents the type of the file",
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResultMetadata": {
        "properties": {
          "activeSession": {
            "description": "The id of the session where the result is currently loaded",
            "type": "string"
          },
          "configUrl": {
            "description": "The URL of the result's configuration",
            "readOnly": "true",
            "type": "string"
          },
          "csvURL": {
            "description": "The URL of the cached csv archive",
            "type": "string"
          },
          "displayName": {
            "description": "The user-visible name of the result",
            "type": "string"
          },
          "download-all": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "description": "Download all available test result types"
          },
          "download-diagnostic": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "description": "The available test diagnostic result"
          },
          "endTime": {
            "description": "A Unix timestamp that indicates when the test ended",
            "format": "int64",
            "type": "integer"
          },
          "files": {
            "description": "The list of result files",
            "items": {
              "$ref": "#/components/schemas/ResultFileMetadata"
            },
            "type": "array"
          },
          "id": {
            "description": "The unique identifier of the result",
            "readOnly": "true",
            "type": "string"
          },
          "lastModified": {
            "description": "A Unix timestamp that indicates when the result was last modified",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "markedAsDeleted": {
            "$ref": "#/components/schemas/MarkedAsDeleted"
          },
          "owner": {
            "description": "The user-visible name of the user who owns the result",
            "readOnly": "true",
            "type": "string"
          },
          "ownerId": {
            "description": "The unique identifier of the user who owns the result",
            "readOnly": "true",
            "type": "string"
          },
          "pdfURL": {
            "description": "The URL of the cached pdf report",
            "type": "string"
          },
          "pinned": {
            "description": "A flag that indicates if the result's configuration is pinned",
            "type": "boolean"
          },
          "reportingLinks": {
            "description": "A list of links to result reporting resources",
            "items": {
              "$ref": "#/components/schemas/APILink"
            },
            "type": "array"
          },
          "resultUrl": {
            "description": "The URL of the result",
            "readOnly": "true",
            "type": "string"
          },
          "startTime": {
            "description": "A Unix timestamp that indicates when the test was started",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A series of tags that describe the result",
            "type": "object"
          },
          "testName": {
            "description": "The name of the test associated with the result",
            "type": "string"
          },
          "type": {
            "description": "The application type of the result",
            "readOnly": "true",
            "type": "string"
          },
          "userTags": {
            "description": "The list of user defined tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResultsGroup": {
        "properties": {
          "Name": {
            "description": "The name of the result group",
            "readOnly": "true",
            "type": "string"
          },
          "Results": {
            "description": "The IDs of the results that are part of the group",
            "items": {
              "type": "string"
            },
            "readOnly": "true",
            "type": "array"
          }
        },
        "type": "object"
      },
      "SaveConfigOperation": {
        "properties": {
          "Name": {
            "description": "The name of the configuration template that will be saved",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Scenario": {
        "properties": {
          "ActionTimeout": {
            "description": "The action timeout value of the Scenario.",
            "format": "int32",
            "maximum": "3600",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(30)"
          },
          "Active": {
            "description": "Indicates whether the scenario is enabled or not.",
            "type": "boolean",
            "x-auto": "default(true)"
          },
          "ClientHTTPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HTTPProfile"
              }
            ],
            "description": "The client HTTP profile used in the Scenario.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "Connections": {
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "ConnectionsMaxTransactions": {
            "description": "The maximum number of transactions for all scenario connections.",
            "format": "int32",
            "maximum": "64000",
            "minimum": "0",
            "type": "integer"
          },
          "Description": {
            "description": "The description of the Scenario.",
            "type": "string"
          },
          "DestinationHostname": {
            "type": "string"
          },
          "DnnId": {
            "type": "string"
          },
          "EndPointID": {
            "description": "The endpoint ID of the Scenario.",
            "format": "int32",
            "type": "integer"
          },
          "Endpoints": {
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            },
            "type": "array",
            "x-delete": "-,-",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,-",
            "x-post": "-",
            "x-put": "-,-",
            "x-readonly": "true"
          },
          "ExternalResourceURL": {
            "description": "The external resource URL of the Scenario.",
            "type": "string"
          },
          "Index": {
            "description": "The index of the scenario.",
            "format": "int32",
            "minimum": "1",
            "type": "integer",
            "x-readonly": "true"
          },
          "InheritHTTPProfile": {
            "type": "boolean"
          },
          "IpPreference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IpPreference"
              }
            ],
            "description": "The Ip Preference. Must be one of: IPV4_ONLY, IPV6_ONLY, BOTH_IPV4_FIRST, BOTH_IPV6_FIRST or IP_PREF_MAX."
          },
          "IsDeprecated": {
            "description": "A value that indicates if the action is deprecated.",
            "type": "boolean",
            "x-readonly": "true"
          },
          "IterationCount": {
            "description": "The iteration counter of the Scenario.",
            "format": "int32",
            "type": "integer"
          },
          "MaxActiveLimit": {
            "description": "The maximum active limit of the Scenario.",
            "format": "int32",
            "type": "integer"
          },
          "Name": {
            "$ref": "#/components/schemas/Name"
          },
          "NetworkMapping": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkMapping"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "Params": {
            "items": {
              "$ref": "#/components/schemas/Params"
            },
            "type": "array",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-put": "-,*"
          },
          "ProtocolID": {
            "description": "The protocol ID of the Scenario.",
            "type": "string"
          },
          "QosFlowId": {
            "type": "string"
          },
          "ReadonlyMaxTrans": {
            "description": "If true, ConnectionsMaxTransactions will be readonly.",
            "type": "boolean",
            "x-readonly": "true"
          },
          "ServerHTTPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HTTPProfile"
              }
            ],
            "description": "The server HTTP profile used in the Scenario.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "SupportsClientHTTPProfile": {
            "description": "Indicates if the scenario supports Client HTTP profile.",
            "type": "boolean"
          },
          "SupportsHTTPProfiles": {
            "description": "Indicates if the scenario supports HTTP profiles.",
            "type": "boolean"
          },
          "SupportsServerHTTPProfile": {
            "description": "Indicates if the scenario supports Server HTTP profile.",
            "type": "boolean"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "Name",
          "id",
          "ClientHTTPProfile",
          "ServerHTTPProfile",
          "SupportsHTTPProfiles",
          "Endpoints",
          "NetworkMapping",
          "InheritHTTPProfile"
        ],
        "type": "object"
      },
      "SecondaryObjective": {
        "properties": {
          "Enabled": {
            "description": "If false, the values of this objective will be ignored.",
            "type": "boolean",
            "x-auto": "default(false)"
          },
          "MaxPendingSimulatedUsers": {
            "description": "Only applies if Type is SimulatedUsers. The maximum number or percentage of users that can be in the pending state (not yet connected and sending traffic) at any time. You can either specify a number or a percentage using the % sign.",
            "pattern": "^[0-9]+%?$",
            "type": "string",
            "x-auto": "default(10%)"
          },
          "MaxSimulatedUsersPerInterval": {
            "description": "Only applies if Type is SimulatedUsers. The maximum number of simulated users at which new users are initiated and teardown per interval(1 second). Default value is 0 (no limit)",
            "format": "int64",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "ObjectiveUnit": {
            "description": "The objective's unit.",
            "enum": [
              "",
              "bps",
              "Kbps",
              "Mbps",
              "Gbps"
            ],
            "type": "string"
          },
          "ObjectiveValue": {
            "description": "The value of the secondary objective. This value will be used for the whole duration of the test.",
            "format": "float",
            "minimum": "1",
            "type": "number"
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectiveType"
              }
            ],
            "description": "The objective's type (default: SimulatedUsers).",
            "x-auto": "default(Simulated users)"
          }
        },
        "required": [
          "Type",
          "Enabled",
          "ObjectiveValue",
          "ObjectiveUnit",
          "MaxPendingSimulatedUsers"
        ]
      },
      "SegmentType": {
        "description": "The type of timeline segment. Empty, NormalSegment, RampDownSegment and IdleSegment are deprecated.",
        "enum": [
          "SteadySegment",
          "StepUpSegment",
          "StepDownSegment",
          "",
          "NormalSegment",
          "RampDownSegment",
          "IdleSegment"
        ],
        "type": "string",
        "x-enum-varnames": [
          "STEADY_SEGMENT",
          "STEP_UP_SEGMENT",
          "STEP_DOWN_SEGMENT",
          "EMPTY_SEGMENT",
          "NORMAL_SEGMENT",
          "RAMP_DOWN_SEGMENT",
          "IDLE_SEGMENT"
        ]
      },
      "SelectedEnv": {
        "properties": {
          "SessionID": {
            "readOnly": "true",
            "type": "string"
          },
          "TestInterface": {
            "items": {
              "$ref": "#/components/schemas/Interface"
            },
            "readOnly": "true",
            "type": "array"
          },
          "Token": {
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Session": {
        "properties": {
          "application": {
            "description": "The user-friendly name for the application that controls this session",
            "type": "string"
          },
          "config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "description": "The current session's configuration"
          },
          "configName": {
            "description": "The display name of the configuration loaded in the session",
            "type": "string"
          },
          "configUrl": {
            "description": "The external URL of the configuration loaded in the session",
            "type": "string"
          },
          "created": {
            "description": "A Unix timestamp that indicates when the session was created",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "dataModelUrl": {
            "description": "The URL of the data model loaded in the session",
            "readOnly": "true",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the session",
            "readOnly": "true",
            "type": "string"
          },
          "index": {
            "description": "The session's index",
            "readOnly": "true",
            "type": "integer"
          },
          "lastVisited": {
            "description": "A Unix timestamp that indicates when the session was last visited",
            "format": "int64",
            "readOnly": "true",
            "type": "integer"
          },
          "meta": {
            "description": "The session's metadata as a list of key-value pairs",
            "items": {
              "$ref": "#/components/schemas/Pair"
            },
            "type": "array"
          },
          "name": {
            "description": "The user-visible name of the session",
            "maxLength": "200",
            "type": "string"
          },
          "owner": {
            "description": "The user-visible name of the session's owner",
            "readOnly": "true",
            "type": "string"
          },
          "ownerID": {
            "description": "The unique identifier of the session's owner",
            "readOnly": "true",
            "type": "string"
          },
          "pinned": {
            "description": "A flag that indicates if the session is pinned",
            "type": "boolean"
          },
          "state": {
            "description": "The current state of the session",
            "type": "string"
          },
          "test": {
            "$ref": "#/components/schemas/TestInfo"
          }
        },
        "type": "object"
      },
      "SessionReuseMethodTLS12": {
        "description": "The session reuse method. Must be one of: DISABLE, SESSION-TICKET or SESSION-ID (default: DISABLE).",
        "enum": [
          "DISABLE",
          "SESSION-TICKET",
          "SESSION-ID"
        ],
        "type": "string",
        "x-auto": "default(DISABLE)"
      },
      "SessionReuseMethodTLS13": {
        "description": "The session reuse method. Must be DISABLE (default: DISABLE).",
        "enum": [
          "DISABLE"
        ],
        "type": "string",
        "x-auto": "default(DISABLE)",
        "x-enum-varnames": [
          "DISABLE13"
        ]
      },
      "SetDpdkModeOperationInput": {
        "properties": {
          "agentIds": {
            "description": "The IDs of the agents for which DPDK mode will be set",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "description": "A flag indicating whether DPDK should be enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SetNtpOperationInput": {
        "properties": {
          "agentIds": {
            "description": "The IDs of the agents whose NTP configuration will be updated",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "servers": {
            "description": "The list of NTP servers to be configured on each agent",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SimulatedIdP": {
        "properties": {
          "AssertionSignature": {
            "type": "boolean",
            "x-default": "default(true)"
          },
          "AudienceURI": {
            "type": "string"
          },
          "CertConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CertConfig"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "NameIdFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NameIdFormat"
              }
            ]
          },
          "ResponseSignature": {
            "type": "boolean",
            "x-default": "default(true)"
          },
          "SignatureAlgorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdPSignatureAlgo"
              }
            ]
          },
          "SingleSignOnURL": {
            "type": "string"
          },
          "XMLMetadata": {
            "format": "binary",
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array",
            "x-get": "DownloadSimulatedIDPMetadata",
            "x-multiplicity": "required"
          }
        },
        "required": [
          "SingleSignOnURL",
          "AudienceURI",
          "NameIdFormat",
          "ResponseSignature",
          "AssertionSignature",
          "SignatureAlgorithm",
          "CertConfig"
        ],
        "type": "object"
      },
      "Snapshot": {
        "properties": {
          "timestamp": {
            "description": "The Unix timestamp in milliseconds at which the snapshot was taken",
            "type": "integer"
          },
          "values": {
            "description": "The values of the snapshot. The order of the values corresponds to the order of columns in result.",
            "items": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "items": {},
                    "type": "array"
                  },
                  {
                    "type": "object"
                  }
                ]
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SortBodyField": {
        "properties": {
          "field": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpecificObjective": {
        "properties": {
          "MaxPendingSimulatedUsers": {
            "description": "Only applies if Type is SimulatedUsers. The maximum number or percentage of users that can be in the pending state (not yet connected and sending traffic) at any time. You can either specify a number or a percentage using the % sign.",
            "pattern": "$|^[0-9]+%?$",
            "type": "string",
            "x-auto": "default(10%)"
          },
          "MaxSimulatedUsersPerInterval": {
            "description": "Only applies if Type is SimulatedUsers. The maximum number of simulated users at which new users are initiated and teardown per interval(1 second). Default value is 0 (no limit)",
            "format": "int64",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "Timeline": {
            "description": "The timeline of this objective.",
            "items": {
              "$ref": "#/components/schemas/TimelineSegmentUnion"
            },
            "maxItems": "3",
            "minItems": "3",
            "type": "array",
            "x-auto": "default(items(3))",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectiveType"
              }
            ],
            "description": "The objective's type (default: Throughput).",
            "x-auto": "default(Throughput)"
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectiveUnit"
              }
            ],
            "description": "The objective's unit. Must be one of: bps or ''."
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Type",
          "Unit",
          "MaxPendingSimulatedUsers",
          "Timeline"
        ]
      },
      "StatelessStream": {
        "properties": {
          "ClientStreamProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "Direction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamDirection"
              }
            ]
          },
          "IsFloodStream": {
            "type": "boolean",
            "x-auto": "default(False)",
            "x-readonly": "true"
          },
          "ServerStreamProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "ObjectiveWeight",
          "Direction"
        ],
        "type": "object"
      },
      "StaticARPEntry": {
        "properties": {
          "Count": {
            "format": "int32",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "RemoteIP": {
            "minLength": "1",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string"
          },
          "RemoteIPIncr": {
            "minLength": "1",
            "pattern": "^(((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(([0-9a-fA-F]{1,4}:){5,5}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}|([0-9a-fA-F]{1,4}:){1,4}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){2,2}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){3,3}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){4,4})|:(:[0-9a-fA-F]{1,4}){1,5}):((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$",
            "type": "string",
            "x-auto": "default(0.0.0.1)"
          },
          "RemoteMAC": {
            "pattern": "^$|(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)",
            "type": "string"
          },
          "RemoteMACIncr": {
            "pattern": "^$|(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)",
            "type": "string",
            "x-auto": "default(00:00:00:00:00:01)"
          },
          "StaticArpEntryName": {
            "$ref": "#/components/schemas/Name"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "StaticArpEntryName"
        ],
        "type": "object"
      },
      "StatsResult": {
        "properties": {
          "availableFilters": {
            "description": "The list of available filters",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          },
          "columns": {
            "description": "The list of columns returned by the query",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the query",
            "type": "string"
          },
          "snapshots": {
            "description": "The list of snapshots returned by the query",
            "items": {
              "$ref": "#/components/schemas/Snapshot"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SteadySegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineSegmentBase"
          },
          {
            "properties": {
              "ObjectiveUnit": {
                "enum": [
                  "",
                  "bps",
                  "Kbps",
                  "Mbps",
                  "Gbps"
                ],
                "type": "string"
              },
              "ObjectiveValue": {
                "format": "float",
                "minimum": "1",
                "type": "number",
                "x-auto": "default(1)"
              }
            },
            "required": [
              "ObjectiveValue",
              "ObjectiveUnit"
            ],
            "type": "object"
          }
        ]
      },
      "StepSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineSegmentBase"
          },
          {
            "properties": {
              "Enabled": {
                "description": "Whether this timeline segment will be used.",
                "type": "boolean",
                "x-auto": "default(true)"
              },
              "NumberOfSteps": {
                "description": "The number of steps to execute. The step value will be computed based on the SteadySegment with the following formula: StepObjectiveValue = SteadySegment.ObjectiveValue / NumberOfSteps.",
                "format": "int64",
                "maximum": "10000",
                "minimum": "2",
                "type": "integer",
                "x-auto": "default(2)"
              }
            },
            "required": [
              "Enabled",
              "NumberOfSteps"
            ],
            "type": "object"
          }
        ]
      },
      "StreamDirection": {
        "enum": [
          "ClientToServer",
          "ServerToClient",
          "Bidirectional"
        ],
        "type": "string"
      },
      "StreamPayloadType": {
        "enum": [
          "RANDOM",
          "PSEUDORANDOM",
          "null"
        ],
        "type": "string"
      },
      "StreamProfile": {
        "properties": {
          "packetRate": {
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer"
          },
          "payloadSize": {
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer"
          },
          "payloadType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StreamPayloadType"
              }
            ]
          },
          "totalEstimatedThroughput": {
            "type": "string",
            "x-readonly": "true"
          },
          "totalEstimatedThroughputPerSimulatedUser": {
            "type": "string",
            "x-readonly": "true"
          },
          "uniquePoolSize": {
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer"
          }
        },
        "required": [
          "packetRate",
          "payloadSize",
          "payloadType"
        ],
        "type": "object"
      },
      "SystemInfo": {
        "properties": {
          "kernelVersion": {
            "readOnly": "true",
            "type": "string"
          },
          "osName": {
            "readOnly": "true",
            "type": "string"
          },
          "portManagerVersion": {
            "readOnly": "true",
            "type": "string"
          },
          "trafficAgentInfo": {
            "items": {
              "$ref": "#/components/schemas/TrafficAgentInfo"
            },
            "readOnly": "true",
            "type": "array"
          }
        },
        "type": "object"
      },
      "TLSProfile": {
        "properties": {
          "certificateFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The certificate file of the TLS profile.",
            "x-auto": "default(method(GetDefaultCertificateFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "cipher": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CipherTLS12"
              }
            ]
          },
          "cipher12": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CipherTLS12"
              }
            ]
          },
          "cipher13": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CipherTLS13"
              }
            ]
          },
          "ciphers12": {
            "items": {
              "$ref": "#/components/schemas/CipherTLS12"
            }
          },
          "ciphers13": {
            "items": {
              "$ref": "#/components/schemas/CipherTLS13"
            }
          },
          "dhFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "x-auto": "default(method(GetDefaultDhFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "get-tls-conflicts": {
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array",
            "x-operation": "true",
            "x-post": "-,GetTLSConflicts"
          },
          "immediateClose": {
            "description": "The immediate FIN after close notify",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "keyFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Params"
              }
            ],
            "description": "The key file of the TLS profile.",
            "x-auto": "default(method(GetDefaultKeyFile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "keyFilePassword": {
            "description": "The key file password of the TLS profile.",
            "maxLength": "200",
            "type": "string",
            "x-auto": "default(appsec)"
          },
          "middleBoxEnabled": {
            "description": "If true, the middle box compatibility will be enabled",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "profileId": {
            "description": "The ID of the TLS profile (default: TLSProfile).",
            "type": "string",
            "x-auto": "default(TLSProfile)"
          },
          "resolve-tls-conflicts": {
            "items": {
              "$ref": "#/components/schemas/Conflict"
            },
            "type": "array",
            "x-operation": "true",
            "x-post": "-,ResolveTLSConflicts"
          },
          "sendCloseNotify": {
            "description": "If true, a TLS close-notify alert will be sent while closing the TLS session",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "sessionReuseCount": {
            "maximum": "2147483647",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "sessionReuseMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionReuseMethodTLS12"
              }
            ]
          },
          "sessionReuseMethod12": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionReuseMethodTLS12"
              }
            ]
          },
          "sessionReuseMethod13": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionReuseMethodTLS13"
              }
            ]
          },
          "sniCertConfigs": {
            "description": "The certificate configs per SNI of the TLS profile.",
            "items": {
              "$ref": "#/components/schemas/CertConfig"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "-,*"
          },
          "sniEnabled": {
            "description": "The enable status of the SNI configuration (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "tls12Enabled": {
            "type": "boolean"
          },
          "tls13Enabled": {
            "type": "boolean"
          },
          "useTlsProfile": {
            "description": "When disabled, the connection is not TLS secured (default: true).",
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "version": {
            "description": "The version of the TLS profile (default: NONE). Must be one of: NONE or TLSv1.2 or TLSv1.3.",
            "enum": [
              "NONE",
              "TLSv1.2",
              "TLSv1.3"
            ],
            "type": "string",
            "x-auto": "default(NONE)"
          }
        },
        "required": [
          "profileId",
          "version",
          "dhFile",
          "certificateFile",
          "keyFile",
          "sniEnabled",
          "tls12Enabled",
          "tls13Enabled"
        ],
        "type": "object"
      },
      "TagList": {
        "description": "A list of tags.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": "true"
      },
      "TcpProfile": {
        "properties": {
          "CloseWithReset": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "DeferAccept": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "EcnEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "MaxRto": {
            "format": "int32",
            "maximum": "120000",
            "minimum": "1000",
            "type": "integer",
            "x-auto": "default(3200)"
          },
          "MaxSrcPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(65535)"
          },
          "MinRto": {
            "format": "int32",
            "maximum": "120000",
            "minimum": "50",
            "type": "integer",
            "x-auto": "default(100)"
          },
          "MinSrcPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1024)"
          },
          "PingPong": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "PmtuDiscDisabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "RecycleTwEnabled": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "Reordering": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "ReuseTwEnabled": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "RxBuffer": {
            "format": "int32",
            "maximum": "1073741824",
            "minimum": "1024",
            "type": "integer",
            "x-auto": "default(4096)"
          },
          "SackEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "SockGroup": {
            "type": "string",
            "x-auto": "default(appsim_group)"
          },
          "TimestampHdrEnabled": {
            "type": "boolean",
            "x-auto": "default(True)"
          },
          "TxBuffer": {
            "format": "int32",
            "maximum": "1073741824",
            "minimum": "1024",
            "type": "integer",
            "x-auto": "default(4096)"
          },
          "UserMss": {
            "format": "int32",
            "maximum": "65495",
            "minimum": "36",
            "type": "integer",
            "x-auto": "default(1460)"
          },
          "WscaleEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          }
        },
        "required": [
          "TxBuffer",
          "RxBuffer",
          "MinSrcPort",
          "MaxSrcPort",
          "MinRto",
          "MaxRto"
        ]
      },
      "TestInfo": {
        "properties": {
          "dashboards": {
            "description": "All the dashboards generated for the current test",
            "items": {
              "$ref": "#/components/schemas/Dashboard"
            },
            "type": "array"
          },
          "defaultDashboardIndex": {
            "description": "The index of the dashboard that should be opened when user first accesses the UI",
            "format": "int64",
            "type": "integer"
          },
          "defaultPollingInterval": {
            "description": "The default polling interval that should be used by the dashboards to refresh their data from the underlying stats source",
            "format": "int64",
            "type": "integer"
          },
          "status": {
            "description": "The status of the test",
            "type": "string"
          },
          "testDetails": {
            "description": "An optional message that gives more details about the test run",
            "maxLength": "500",
            "type": "string"
          },
          "testDuration": {
            "description": "The run duration (in seconds) of the test",
            "format": "int64",
            "minimum": "0",
            "type": "integer"
          },
          "testElapsed": {
            "description": "The elapsed time (in seconds) since the test started",
            "format": "int64",
            "minimum": "0",
            "readOnly": "true",
            "type": "integer"
          },
          "testId": {
            "description": "The identifier of the test run",
            "type": "string"
          },
          "testInitialized": {
            "description": "A Unix timestamp that indicates when the last test was initialized",
            "format": "int64",
            "minimum": "0",
            "type": "integer"
          },
          "testStarted": {
            "description": "A Unix timestamp that indicates when the test was started",
            "format": "int64",
            "minimum": "0",
            "type": "integer"
          },
          "testStopped": {
            "description": "A Unix timestamp that indicates when the test was stopped. May be null if the test is still running.",
            "format": "int64",
            "minimum": "0",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestStateChangedOperation": {
        "properties": {
          "message": {
            "description": "An optional message that describes the reason the test ended",
            "type": "string"
          },
          "newState": {
            "description": "An optional enum that identifies the current state of the test",
            "type": "string"
          },
          "oldState": {
            "description": "An optional enum that identifies the previous state of the test",
            "type": "string"
          },
          "owner": {
            "description": "An optional friendly display name for the user which initiated the operation",
            "type": "string"
          },
          "ownerId": {
            "description": "An optional identifier that uniquely identifies the user which initiated the operation",
            "type": "string"
          },
          "reason": {
            "description": "An optional enum that identifies the underlying reason for the test's end",
            "type": "string"
          },
          "testId": {
            "description": "The test to which the state change refers",
            "type": "string"
          },
          "timestamp": {
            "description": "An optional Unix timestamp that indicates when the test state was changed",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TimeValue": {
        "properties": {
          "now": {
            "description": "A Unix timestamp that indicates the current cluster time",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TimelineSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineSegmentBase"
          },
          {
            "properties": {
              "ObjectiveUnit": {
                "description": "The measurement unit for the objective value. Only applicable for Throughput objectives.",
                "enum": [
                  "",
                  "bps",
                  "Kbps",
                  "Mbps",
                  "Gbps"
                ],
                "type": "string",
                "x-auto": "default(Gbps)"
              },
              "ObjectiveValue": {
                "description": "The objective value for this timeline segment.",
                "format": "float",
                "minimum": "1",
                "type": "number",
                "x-auto": "default(1)"
              },
              "PrimaryObjectiveUnit": {
                "description": "Deprecated. Use PrimaryObjective.Timeline[].ObjectiveUnit instead. The primary objective unit. (default: Gbps)",
                "enum": [
                  "",
                  "bps",
                  "Kbps",
                  "Mbps",
                  "Gbps"
                ],
                "type": "string",
                "x-auto": "default(Gbps)",
                "x-deprecated": "true"
              },
              "PrimaryObjectiveValue": {
                "description": "Deprecated. Use PrimaryObjective.Timeline[].ObjectiveValue instead. The primary objective value (default: 1).",
                "format": "float",
                "minimum": "0",
                "type": "number",
                "x-auto": "default(1)",
                "x-deprecated": "true"
              },
              "SecondaryObjectiveValues": {
                "description": "Deprecated. Use SecondaryObjective.ObjectiveValue/ObjectiveUnit instead. The secondary objectives values.",
                "items": {
                  "$ref": "#/components/schemas/ObjectiveValueEntry"
                },
                "type": "array",
                "x-delete": "-,*",
                "x-deprecated": "true",
                "x-get": "*,*",
                "x-multiplicity": "list",
                "x-patch": "-,*",
                "x-post": "*",
                "x-put": "-,*"
              }
            },
            "required": [
              "PrimaryObjectiveValue",
              "SecondaryObjectiveValues",
              "PrimaryObjectiveUnit",
              "SecondaryObjectiveUnit"
            ],
            "type": "object"
          }
        ]
      },
      "TimelineSegmentBase": {
        "properties": {
          "Duration": {
            "description": "The duration of the timeline segment (default: 600).",
            "format": "int64",
            "maximum": "2160000",
            "minimum": "30",
            "type": "integer",
            "x-auto": "default(600)"
          },
          "SegmentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentType"
              }
            ],
            "description": "The segment's type. Must be one of: SteadySegment, StepUpSegment, StepDownSegment.",
            "x-auto": "default(SteadySegment)"
          },
          "WarmUpPeriod": {
            "description": "Deprecated. Use ObjectivesAndTimeline.WarmUp instead. The time that servers may need to warm up, when clients should wait (default: 0 seconds).",
            "format": "int64",
            "maximum": "2160000",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)",
            "x-deprecated": "true"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Duration",
          "SegmentType"
        ],
        "type": "object"
      },
      "TimelineSegmentUnion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SteadySegment"
          },
          {
            "$ref": "#/components/schemas/StepSegment"
          }
        ]
      },
      "Timers": {
        "properties": {
          "DPDEnabled": {
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "DPDIdlePeriod": {
            "format": "int32",
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1000)"
          },
          "DPDTimeout": {
            "format": "int32",
            "maximum": "2147483647",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(10)"
          }
        },
        "required": [
          "DPDEnabled",
          "DPDIdlePeriod",
          "DPDTimeout"
        ],
        "type": "object"
      },
      "Track": {
        "properties": {
          "Actions": {
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "type": "array",
            "x-delete": "*,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "*"
          },
          "add-actions": {
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array",
            "x-operation": "true",
            "x-post": "-,CreateAction"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "Actions"
        ],
        "type": "object"
      },
      "TrackType": {
        "enum": [
          "VIDEO",
          "AUDIO"
        ],
        "type": "string"
      },
      "TrafficAgentInfo": {
        "properties": {
          "type": {
            "readOnly": "true",
            "type": "string"
          },
          "version": {
            "readOnly": "true",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TrafficProfileBase": {
        "properties": {
          "Active": {
            "description": "Indicates whether the profile is enabled or not.",
            "type": "boolean",
            "x-auto": "default(true)"
          },
          "TrafficSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrafficSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "TrafficSettings"
        ],
        "type": "object"
      },
      "TrafficSettings": {
        "properties": {
          "DefaultTransportProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransportProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "DefaultTransportProfile"
        ],
        "type": "object"
      },
      "TransportProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransportProfileBase"
          },
          {
            "properties": {
              "L4ProfileName": {
                "type": "string",
                "x-auto": "default(DefaultTransportProfile)"
              }
            },
            "required": [
              "L4ProfileName"
            ],
            "type": "object"
          }
        ]
      },
      "TransportProfileBase": {
        "properties": {
          "ClientHTTPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HTTPProfile"
              }
            ],
            "description": "The client HTTP profile used in the Scenario.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ClientTLSProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TLSProfile"
              }
            ],
            "x-auto": "default(method(GetDefaultClientTlsProfile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ClientTcpProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TcpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "IpTos": {
            "format": "int32",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "RTPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RTPProfile"
              }
            ],
            "x-auto": "default(method(GetDefaultRTPProfile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ServerHTTPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HTTPProfile"
              }
            ],
            "description": "The server HTTP profile used in the Scenario.",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ServerTLSProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TLSProfile"
              }
            ],
            "x-auto": "default(method(GetDefaultServerTlsProfile))",
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "ServerTcpProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TcpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "UdpProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UdpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "VlanPrio": {
            "format": "int32",
            "type": "integer",
            "x-auto": "default(0)"
          }
        },
        "required": [
          "id",
          "L4ProfileName"
        ],
        "type": "object"
      },
      "TunnelRange": {
        "description": "The Tunnel Range assigned to the current test configuration",
        "properties": {
          "CiscoAnyConnectSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CiscoAnyConnectSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "DCPRequestTimeout": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(120)"
          },
          "DNSResolver": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DNSResolver"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "F5Settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/F5Settings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "FortinetSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FortinetSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "PANGPSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PANGPSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "TcpDstPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(443)"
          },
          "TunnelCountPerOuterIP": {
            "format": "int32",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "TunnelEstablishmentTimeout": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(120)"
          },
          "VendorType": {
            "enum": [
              "CISCO_ANY_CONNECT",
              "PAN_GP",
              "FORTINET",
              "F5"
            ],
            "type": "string",
            "x-auto": "default(CISCO_ANY_CONNECT)"
          }
        },
        "required": [
          "VendorType",
          "TunnelCountPerOuterIP",
          "InnerIPCount",
          "TcpDstPort",
          "CiscoAnyConnectSettings",
          "FortinetSettings",
          "PANGPSettings",
          "DCPRequestTimeout",
          "F5Settings"
        ],
        "type": "object"
      },
      "TunnelSettings": {
        "properties": {
          "AuthSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthSettings"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "OuterTCPProfile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TcpProfile"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          }
        },
        "required": [
          "OuterTCPProfile",
          "OuterTLSClientProfile",
          "CiscoEncapsulation",
          "FortinetEncapsulation",
          "PANGPEncapsulation",
          "VPNGateway",
          "AuthSettings"
        ],
        "type": "object"
      },
      "TunnelStack": {
        "description": "The tunnel stack assigned to the current test configuration",
        "properties": {
          "InnerIPRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InnerIPRange"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "OuterIPRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPRange"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "TunnelRange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TunnelRange"
              }
            ],
            "x-get": "*",
            "x-multiplicity": "required",
            "x-patch": "*",
            "x-put": "*"
          },
          "TunnelStackName": {
            "$ref": "#/components/schemas/Name"
          },
          "id": {
            "$ref": "#/components/schemas/ID"
          }
        },
        "required": [
          "id",
          "TunnelStackName",
          "InnerIPRange",
          "OuterIPRange",
          "TunnelRange"
        ],
        "type": "object"
      },
      "TypeArrayV2Metadata": {
        "properties": {
          "elements": {
            "description": "The list of array_v2 elements",
            "items": {
              "$ref": "#/components/schemas/ArrayV2ElementMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TypeInfoMetadata": {
        "properties": {
          "arrayV2": {
            "$ref": "#/components/schemas/TypeArrayV2Metadata"
          },
          "int": {
            "$ref": "#/components/schemas/TypeIntMetadata"
          },
          "media": {
            "$ref": "#/components/schemas/TypeMediaMetadata"
          },
          "string": {
            "$ref": "#/components/schemas/TypeStringMetadata"
          }
        },
        "type": "object"
      },
      "TypeIntMetadata": {
        "properties": {
          "MaxValue": {
            "description": "The maximum value of the integer",
            "type": "integer"
          },
          "MinValue": {
            "description": "The minimum value of the integer",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TypeMediaMetadata": {
        "properties": {
          "TrackId": {
            "description": "The media profile track ID",
            "type": "string"
          },
          "TrackType": {
            "description": "The media profile track type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TypeStringMetadata": {
        "properties": {
          "Charset": {
            "description": "The set of characters allowed in string value",
            "type": "string"
          },
          "MaxLength": {
            "description": "The maximum length of the string value",
            "type": "integer"
          },
          "MinLength": {
            "description": "The minimum length of the string value",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UdpProfile": {
        "properties": {
          "MaxSrcPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(65535)"
          },
          "MinSrcPort": {
            "format": "int32",
            "maximum": "65535",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(1024)"
          },
          "RecvBuffSizeIni": {
            "format": "int32",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(32768)"
          },
          "RecvBuffSizeRes": {
            "format": "int32",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(32768)"
          },
          "RxBuffer": {
            "format": "int32",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(32768)"
          },
          "SockGroup": {
            "type": "string",
            "x-auto": "default(appsim_group)"
          },
          "TxBuffer": {
            "format": "int32",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(32768)"
          }
        }
      },
      "UpdateNetworkMapping": {
        "properties": {
          "ClientNetworkTags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ExcludedDUTList": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "SelectTags": {
            "type": "boolean"
          },
          "ServerNetworkTags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VLANRange": {
        "description": "The VLAN range assigned to an IP range configuration",
        "properties": {
          "Count": {
            "description": "The number of VLANs generated (default: 1).",
            "format": "int32",
            "maximum": "4094",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "CountPerAgent": {
            "description": "The number of VLANs that should be assigned to each traffic agent for this VLAN range segment in a valid test (default: 1).",
            "format": "int32",
            "maximum": "4094",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "MaxCountPerAgent": {
            "description": "The maximum number of VLANs that should be assigned to each traffic agent for this VLAN range segment in a valid test (default: 1).",
            "format": "int32",
            "maximum": "4094",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "Priority": {
            "description": "The priority code point value (default: 0).",
            "format": "int32",
            "maximum": "7",
            "minimum": "0",
            "type": "integer",
            "x-auto": "default(0)"
          },
          "StaticARPTable": {
            "items": {
              "$ref": "#/components/schemas/StaticARPEntry"
            },
            "type": "array",
            "x-delete": "-,*",
            "x-get": "*,*",
            "x-multiplicity": "list",
            "x-patch": "-,*",
            "x-post": "*",
            "x-put": "*,*"
          },
          "TagProtocolId": {
            "description": "The tag protocol identifier (default: 33024).",
            "enum": [
              "33024"
            ],
            "format": "int32",
            "type": "integer",
            "x-auto": "default(33024)"
          },
          "VlanAuto": {
            "description": "A flag indicating if VLAN settings for the VLANRange should be determined automatically (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "VlanEnabled": {
            "description": "The enable status of the VLAN configuration, if not determined automatically (default: false).",
            "type": "boolean",
            "x-auto": "default(False)"
          },
          "VlanId": {
            "description": "The VLAN identifier (default: 1).",
            "format": "int32",
            "maximum": "4094",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          },
          "VlanIncr": {
            "description": "The VLAN incrementation rule (default: 1).",
            "format": "int32",
            "maximum": "4094",
            "minimum": "1",
            "type": "integer",
            "x-auto": "default(1)"
          }
        },
        "required": [
          "VlanAuto",
          "VlanEnabled"
        ],
        "type": "object"
      },
      "ValidationMessage": {
        "properties": {
          "Message": {
            "type": "string"
          },
          "Severity": {
            "enum": [
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "type": "string"
          },
          "Timestamp": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "Message",
          "Timestamp",
          "Severity"
        ],
        "type": "object"
      },
      "Version": {
        "properties": {
          "configServiceVersion": {
            "type": "string"
          },
          "dataModelVersion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "activation-code-info": {
        "description": "The KSM activation code information",
        "properties": {
          "activationCode": {
            "type": "string"
          },
          "availableQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "totalQuantity": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "activationCode",
          "totalQuantity",
          "availableQuantity",
          "product",
          "description"
        ],
        "type": "object"
      },
      "activation-code-list-request": {
        "description": "Activation code list request object",
        "properties": {
          "activationCode": {
            "description": "The activation codes",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "activationCodes"
        ],
        "type": "object"
      },
      "activation-code-request": {
        "description": "Activation code request object",
        "properties": {
          "activationCode": {
            "description": "The activation code",
            "type": "string"
          }
        },
        "required": [
          "activationCode"
        ],
        "type": "object"
      },
      "async-operation-response": {
        "description": "The POST response for an async operation.",
        "properties": {
          "id": {
            "description": "The subresource id of the status.",
            "type": "integer"
          },
          "message": {
            "description": "A message from the operation (optional).",
            "type": "string"
          },
          "progress": {
            "description": "The progress of the operation (percent).",
            "type": "integer"
          },
          "resultUrl": {
            "description": "The URL where the archive is available.",
            "type": "string"
          },
          "state": {
            "description": "The state of the operation.",
            "type": "string"
          },
          "type": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "url": {
            "description": "The status URI of the operation.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "state",
          "progress",
          "message",
          "url",
          "resultUrl"
        ],
        "type": "object"
      },
      "counted-feature-consumer": {
        "description": "Counted feature consumer.",
        "properties": {
          "app": {
            "description": "The application consuming the feature.",
            "type": "string"
          },
          "client": {
            "description": "The client consuming the feature.",
            "type": "string"
          },
          "consumedCount": {
            "description": "The count consumed.",
            "format": "int32",
            "type": "integer"
          },
          "reservedCount": {
            "description": "The count reserved.",
            "format": "int32",
            "type": "integer"
          },
          "reservedRemainingDuration": {
            "description": "Remaining reserved duration, in seconds.",
            "format": "int32",
            "type": "integer"
          },
          "user": {
            "description": "The user consuming the feature.",
            "type": "string"
          }
        },
        "required": [
          "user",
          "app",
          "client",
          "consumedCount",
          "reservedCount",
          "reservedRemainingDuration"
        ],
        "type": "object"
      },
      "counted-feature-stats": {
        "description": "Counted feature stats.",
        "properties": {
          "availableCount": {
            "description": "Available count.",
            "format": "int32",
            "type": "integer"
          },
          "consumers": {
            "description": "Consumed by.",
            "items": {
              "$ref": "#/components/schemas/counted-feature-consumer"
            },
            "type": "array"
          },
          "featureName": {
            "description": "The feature name.",
            "type": "string"
          },
          "installedCount": {
            "description": "Total installed count.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "featureName",
          "installedCount",
          "availableCount",
          "consumers"
        ],
        "type": "object"
      },
      "entitlement-code-info": {
        "description": "The KSM entitlement code information",
        "properties": {
          "activationCodes": {
            "description": "The list of activation codes that the entitlement code was generated with.",
            "items": {
              "$ref": "#/components/schemas/activation-code-info"
            },
            "type": "array"
          },
          "entitlementCode": {
            "description": "The entitlement code",
            "type": "string"
          }
        },
        "required": [
          "entitlementCode",
          "activationCodes"
        ],
        "type": "object"
      },
      "entitlement-code-request": {
        "description": "Entitlement code request object",
        "properties": {
          "entitlementCode": {
            "description": "The entitlement code",
            "type": "string"
          }
        },
        "required": [
          "entitlementCode"
        ],
        "type": "object"
      },
      "error-description": {
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "feature": {
        "description": "Feature information",
        "properties": {
          "count": {
            "description": "The feature count",
            "format": "int32",
            "type": "integer"
          },
          "featureType": {
            "description": "The feature type:\n  * `nodeLocked` - Node-locked on the host running the license server\n  * `floating`    - Allows concurrent users\n",
            "enum": [
              "nodeLocked",
              "floating"
            ],
            "type": "string"
          },
          "isUncounted": {
            "description": "Feature is uncounted or not",
            "type": "boolean"
          },
          "name": {
            "description": "The feature name",
            "type": "string"
          },
          "reservation": {
            "description": "The reservation info.",
            "properties": {
              "availableCount": {
                "description": "Count available for reservation.",
                "format": "int32",
                "type": "integer"
              },
              "isAllowed": {
                "description": "Boolean flag denoting if reservation is allowed for the feature.",
                "type": "boolean"
              },
              "reservedCount": {
                "description": "The total reserved count.",
                "format": "int32",
                "type": "integer"
              },
              "reservedRemainingDuration": {
                "description": "Remaining duration, in seconds, of the reservation.",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "isAllowed",
              "availableCount",
              "reservedCount",
              "reservedRemainingDuration"
            ],
            "type": "object"
          }
        },
        "required": [
          "count",
          "name",
          "featureType",
          "isUncounted",
          "reservation"
        ],
        "type": "object"
      },
      "feature-reservation-reserve": {
        "description": "Feature reservation reserve request object.",
        "properties": {
          "countToReserve": {
            "description": "The count to reserve.",
            "format": "int32",
            "type": "integer"
          },
          "duration": {
            "description": "The duration of the reservation, in hours.",
            "format": "int32",
            "maximum": "168",
            "minimum": "1",
            "type": "integer"
          },
          "featureName": {
            "description": "The feature name.",
            "type": "string"
          }
        },
        "required": [
          "featureName",
          "countToReserve",
          "duration"
        ],
        "type": "object"
      },
      "fulfillment-request": {
        "description": "Fulfillment to be sent to KSM.",
        "properties": {
          "activationCode": {
            "description": "The activation code to fulfill.",
            "type": "string"
          },
          "quantity": {
            "description": "The quantity to activate/deactivate.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "activationCode",
          "quantity"
        ],
        "type": "object"
      },
      "hostID": {
        "description": "The host ID of license server.",
        "properties": {
          "hostid": {
            "type": "string"
          }
        },
        "required": [
          "hostID"
        ],
        "type": "object"
      },
      "import-offline-license-result": {
        "description": "The result of import offline license.",
        "properties": {
          "confirmationCode": {
            "description": "Non-empty value, if `isDeactivation` flag is true.",
            "type": "string"
          },
          "isDeactivation": {
            "description": "True, if the offline license was generated through offline deactivation, otherwise false.",
            "type": "boolean"
          },
          "receipt": {
            "$ref": "#/components/schemas/license-receipt"
          }
        },
        "required": [
          "receipt",
          "isDeactivation",
          "confirmationCode"
        ],
        "type": "object"
      },
      "license": {
        "description": "The license information.",
        "properties": {
          "activationCode": {
            "description": "The activation code that uniquely identifies the license",
            "type": "string"
          },
          "daysLeftToExpire": {
            "description": "Days left to expire, value is negative if expired.",
            "format": "int32",
            "type": "integer"
          },
          "expiryDate": {
            "description": "Expiry date of the license",
            "type": "string"
          },
          "features": {
            "description": "Features of the activation code",
            "items": {
              "$ref": "#/components/schemas/feature"
            },
            "type": "array"
          },
          "isExpired": {
            "description": "Expired flag.",
            "type": "boolean"
          },
          "links": {
            "description": "Hypermedia links.",
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "type": "array"
          },
          "maintenanceDate": {
            "description": "Maintenance date of the license",
            "type": "string"
          },
          "partNumberDescription": {
            "description": "Part number description",
            "type": "string"
          },
          "partNumberId": {
            "description": "Part number id.",
            "type": "string"
          },
          "product": {
            "description": "The product for which the license was generated",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity installed of the license",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "activationCode",
          "partNumberId",
          "partNumberDescription",
          "expiryDate",
          "maintenanceDate",
          "product",
          "quantity",
          "daysLeftToExpire",
          "isExpired",
          "features",
          "links"
        ],
        "type": "object"
      },
      "license-receipt": {
        "description": "The license receipt after of an online or offline license operation, as follows:\n  - deactivation: the licenses deactivated with their respective quantities;\n  - activation: the licenses activated with their respective quantities;\n  - synchronize: the licenses renewed;",
        "properties": {
          "changedLicenses": {
            "description": "The list of licenses changed (added/removed/renewed) by a license operation.",
            "items": {
              "$ref": "#/components/schemas/license"
            },
            "type": "array"
          },
          "isOnline": {
            "description": "Flag denoting if the license operation was performed in online or offline mode.",
            "type": "boolean"
          },
          "operationType": {
            "description": "The license operation type performed.",
            "enum": [
              "activation",
              "deactivation",
              "synchronize"
            ],
            "type": "string"
          }
        },
        "required": [
          "operationType",
          "isOnline",
          "changedLicenses"
        ],
        "type": "object"
      },
      "link": {
        "description": "Hypermedia link.",
        "properties": {
          "href": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "method",
          "href"
        ],
        "type": "object"
      },
      "paramSourceType": {
        "enum": [
          "PayloadProfile",
          "DynamicPayloadProfile",
          "Playlist",
          "UserInput",
          "SyntheticData",
          "Compound",
          "DynamicUserInput",
          "MediaProfile"
        ],
        "type": "string",
        "x-enum-varnames": [
          "PAYLOAD_PROFILE_SOURCE",
          "DYNAMIC_PAYLOAD_PROFILE_SOURCE",
          "PLAYLIST_PROFILE_SOURCE",
          "USER_INPUT_SOURCE",
          "SYNTHETIC_DATA_SOURCE",
          "COMPOUND_SOURCE",
          "DYNAMIC_USER_INPUT",
          "MEDIA_PROFILE_SOURCE"
        ]
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/auth/realms/keysight/protocol/openid-connect/auth",
            "refreshUrl": "/auth/realms/keysight/protocol/openid-connect/token",
            "scopes": {
              "offline_access": "Required.",
              "openid": "Required."
            },
            "tokenUrl": "/auth/realms/keysight/protocol/openid-connect/token"
          },
          "password": {
            "refreshUrl": "/auth/realms/keysight/protocol/openid-connect/token",
            "scopes": {
              "offline_access": "Required.",
              "openid": "Required."
            },
            "tokenUrl": "/auth/realms/keysight/protocol/openid-connect/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "description": "CyPerf REST API",
    "title": "CyPerf Application API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v2/agents": {
      "get": {
        "description": "Get all the currently available agents.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Indicates whether offline agents should be excluded",
            "in": "query",
            "name": "excludeOffline",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Agent"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of agents"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/batch-delete": {
      "post": {
        "description": "Remove multiple agents.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/batch-delete/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/exportFiles": {
      "post": {
        "description": "Sends export files requests to a list of agents.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportFilesOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/exportFiles/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/reboot": {
      "post": {
        "description": "Reboot the agents specified in the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RebootOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/reboot/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/release": {
      "post": {
        "description": "Releases all the agents from the given session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/release/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/reserve": {
      "post": {
        "description": "Reserves all the agents from the given session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReserveOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/reserve/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/set-dpdk-mode": {
      "post": {
        "description": "Enable/disable DPDK for a list of agents.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDpdkModeOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/set-dpdk-mode/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/set-ntp": {
      "post": {
        "description": "Set the NTP servers for a list of agents.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetNtpOperationInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/set-ntp/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/operations/update": {
      "post": {
        "description": "Update agents to the recommended version.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/agents/operations/update/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/agents/{agentId}": {
      "delete": {
        "description": "Remove a particular agent.",
        "responses": {
          "204": {
            "description": "The agent was successfully removed."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An agent with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "get": {
        "description": "Get a particular agent.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            },
            "description": "The requested agent"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An agent with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Agents"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the agent.",
          "in": "path",
          "name": "agentId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular agent. Only non-null fields are updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Agent"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The agent was successfully updated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An agent with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/appsec-ui-metadata": {
      "get": {
        "description": "Get the UI metadata",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The UI metadata"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/brokers": {
      "get": {
        "description": "Get all the currently available brokers.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Broker"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Broker"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of external brokers that the application should connect to"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Brokers"
        ]
      },
      "post": {
        "description": "Register an external broker.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Broker"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Broker"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The broker that was registered"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Brokers"
        ]
      }
    },
    "/api/v2/brokers/{brokerId}": {
      "delete": {
        "description": "Remove a particular broker.",
        "responses": {
          "204": {
            "description": "The broker was successfully removed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A broker with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Brokers"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Broker"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A resource with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Brokers"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the broker.",
          "in": "path",
          "name": "brokerId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular broker.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Broker"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The broker was successfully updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A broker with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Brokers"
        ]
      }
    },
    "/api/v2/config-categories": {
      "get": {
        "description": "Get the list of available configuration categories.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ConfigCategory"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ConfigCategory"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of configuration categories"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs": {
      "get": {
        "description": "Get all the configurations available to the current user.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ConfigMetadata"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ConfigMetadata"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of configurations"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "post": {
        "description": "Save or import a new configuration. If the ConfigData field is not provided, this is implemented as a Save operation, only recording the metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/ConfigMetadata"
                },
                "type": "array"
              }
            },
            "application/x-zip": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/zip": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "configZip": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigMetadata"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The configuration that was saved or imported"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs/operations/batch-delete": {
      "post": {
        "description": "Remove multiple configurations.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs/operations/batch-delete/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/configs/operations/exportAll": {
      "post": {
        "description": "Export all configurations owned by the current user. Optionally, provide a list of config IDs to export.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAllOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs/operations/exportAll/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/configs/operations/import": {
      "post": {
        "description": "Import a single configuration from the specified file.",
        "requestBody": {
          "content": {
            "application/x-zip": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/zip": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "configZip": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs/operations/import/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/configs/operations/importAll": {
      "post": {
        "description": "Import all configurations from the specified file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportAllOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/configs/operations/importAll/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/configs/{configId}": {
      "delete": {
        "description": "Delete a particular configuration.",
        "responses": {
          "204": {
            "description": "The configuration was successfully deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The initiator of the request does not have enough privileges to perform the action."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A configuration with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "get": {
        "description": "Get a particular configuration.",
        "parameters": [
          {
            "description": "Specifies if the sub-fields that are objects should be included (eg. 'configData').",
            "in": "query",
            "name": "include",
            "schema": {
              "enum": [
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Specifies if the content of the referenced files (action payloads and TLS files) should be included.",
            "in": "query",
            "name": "resolveDependencies",
            "schema": {
              "enum": [
                "true"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMetadata"
                }
              },
              "application/x-zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "configZip": {
                      "format": "binary",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The requested configuration"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A configuration with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the config.",
          "in": "path",
          "name": "configId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular configuration. Only non-null fields are updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMetadata"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The configuration was successfully updated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A configuration with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      },
      "put": {
        "description": "Update a particular configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMetadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMetadata"
                }
              }
            },
            "description": "The updated configuration"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A configuration with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/controller-migration/operations/export": {
      "post": {
        "description": "Export the data from the controller as a package.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportPackageOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Data Migration"
        ]
      }
    },
    "/api/v2/controller-migration/operations/export/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Data Migration"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/controller-migration/operations/import": {
      "post": {
        "description": "Import the data from the supplied package into the controller.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Data Migration"
        ]
      }
    },
    "/api/v2/controller-migration/operations/import/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Data Migration"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/diagnostics/components": {
      "get": {
        "description": "Get the list of diagnostic components.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiagnosticComponent"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The list of available components."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      }
    },
    "/api/v2/diagnostics/operations/delete": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete all the existing archives from the backend."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      }
    },
    "/api/v2/diagnostics/operations/delete/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "id",
            "required": "true",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Delete all the existing archives from the backend."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      }
    },
    "/api/v2/diagnostics/operations/export": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ArchiveInfo"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The list of available archives."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      },
      "post": {
        "description": "Start the diagnostic export operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagnosticComponentContext"
              }
            }
          },
          "description": "The list of diagnostic components to export. If the list is empty, all components will be exported."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": "Details about the operation that just started."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      }
    },
    "/api/v2/diagnostics/operations/export/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationResponse"
                }
              }
            },
            "description": "Details about the ongoing operation."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/diagnostics/operations/export/{id}/result": {
      "get": {
        "description": "Download the diagnostics from the operation with the specified id.",
        "responses": {
          "200": {
            "content": {
              "application/zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Successfully started the diagnostic download."
          },
          "500": {
            "description": "Unexpected error."
          }
        },
        "tags": [
          "Diagnostics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/disk-usage": {
      "get": {
        "description": "Get information about the controller's disk usage.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DiskUsage"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DiskUsage"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The controller disk usage"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/consumers": {
      "get": {
        "description": "Get the list of consumers.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Consumer"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Consumer"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of consumers which can be either logs or diagnostics"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/consumers/{consumerId}": {
      "get": {
        "description": "Get the size for logs and diagnostics.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumer"
                }
              }
            },
            "description": "Information about logs and diagnostics size"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the consumer.",
          "in": "path",
          "name": "consumerId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/disk-usage/operations/cleanup-diagnostics": {
      "post": {
        "description": "Clean the system diagnostics.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/operations/cleanup-diagnostics/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/disk-usage/operations/cleanup-logs": {
      "post": {
        "description": "Clean the system logs.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/operations/cleanup-logs/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/disk-usage/operations/cleanup-migration": {
      "post": {
        "description": "Clean the migration packages.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/operations/cleanup-migration/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/disk-usage/operations/cleanup-notifications": {
      "post": {
        "description": "Clean all notifications.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/operations/cleanup-notifications/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/disk-usage/operations/cleanup-results": {
      "post": {
        "description": "Clean all statistics.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/disk-usage/operations/cleanup-results/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/docs": {
      "get": {
        "description": "Get the OpenAPI definitions.",
        "responses": {
          "200": {
            "description": "The OpenAPI definitions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/docs.json": {
      "get": {
        "description": "Get the OpenAPI definitions.",
        "responses": {
          "200": {
            "description": "The OpenAPI definitions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/docs.yaml": {
      "get": {
        "description": "Get the OpenAPI definitions.",
        "responses": {
          "200": {
            "content": {
              "text/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "The OpenAPI definitions"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/license-servers": {
      "get": {
        "description": "Get all the currently available license servers.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/LicenseServerMetadata"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/LicenseServerMetadata"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of license servers"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "License servers"
        ]
      },
      "post": {
        "description": "Register a license server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/LicenseServerMetadata"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LicenseServerMetadata"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The license server that was registered"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "License servers"
        ]
      }
    },
    "/api/v2/license-servers/{licenseServerId}": {
      "delete": {
        "description": "Remove a particular license server.",
        "responses": {
          "204": {
            "description": "The license server was successfully removed."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A license server with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "License servers"
        ]
      },
      "get": {
        "description": "Get a particular license server.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseServerMetadata"
                }
              }
            },
            "description": "The requested license server"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A license server with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "License servers"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the license server.",
          "in": "path",
          "name": "licenseServerId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular license server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseServerMetadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated license server"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A license server with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "License servers"
        ]
      }
    },
    "/api/v2/licensing/generate-offline-request": {
      "get": {
        "operationId": "generate_offline_request",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The offline request."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error ocurred."
          }
        },
        "summary": "Generates an offline request that can be used on the offline licensing portal.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/hostid": {
      "get": {
        "operationId": "get_hostid",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hostID"
                }
              }
            },
            "description": "The host ID of license server."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retrieves the host ID of the license server.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/import-offline-license": {
      "post": {
        "operationId": "import_offline_license",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "fileName": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/import-offline-license-result"
                }
              }
            },
            "description": "Completed successfully."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error ocurred."
          }
        },
        "summary": "Installs the offline license.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses": {
      "get": {
        "operationId": "get_installed_licenses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/license"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The installed licenses."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Returns the installed licenses.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses/{licenseId}": {
      "get": {
        "operationId": "get_license",
        "parameters": [
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "licenseId",
            "required": "true",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                }
              }
            },
            "description": "The requested license."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Returns the requested license.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses/{licenseId}/operations/reservation-remove": {
      "post": {
        "operationId": "remove_reservation",
        "parameters": [
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "licenseId",
            "required": "true",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Features remove reservations object."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Remove previously reserved features, thus making them available for checkout by other users.\n",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses/{licenseId}/operations/reservation-reserve": {
      "post": {
        "operationId": "update_reservation",
        "parameters": [
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "licenseId",
            "required": "true",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/feature-reservation-reserve"
                },
                "type": "array"
              }
            }
          },
          "description": "Reservation reserve object."
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Retain over a period of time specific counts of installed features, that can be consumed only by current user.\n",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses/{licenseId}/operations/{operationType}/{id}": {
      "get": {
        "operationId": "get_license_async_operation_status",
        "parameters": [
          {
            "description": "The license resource id.",
            "in": "path",
            "name": "licenseId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The async operation type.",
            "in": "path",
            "name": "operationType",
            "required": "true",
            "schema": {
              "enum": [
                "reservation-reserve",
                "reservation-release"
              ],
              "type": "string"
            }
          },
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "id",
            "required": "true",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Completed."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Returns the status of an ongoing async operation.\n",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/licenses/{licenseId}/operations/{operationType}/{id}/result": {
      "get": {
        "operationId": "get_license_async_operation_result",
        "parameters": [
          {
            "description": "The license resource id.",
            "in": "path",
            "name": "licenseId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The async operation type.",
            "in": "path",
            "name": "operationType",
            "required": "true",
            "schema": {
              "enum": [
                "reservation-reserve",
                "reservation-release"
              ],
              "type": "string"
            }
          },
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "id",
            "required": "true",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/license"
                    }
                  ]
                }
              }
            },
            "description": "Completed successfully."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Returns the result of async operation.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/activate": {
      "post": {
        "operationId": "activate_licenses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/fulfillment-request"
                },
                "type": "array"
              }
            }
          },
          "description": "fulfillments to activate"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Performs an online request to KSM and activates the requested licenses.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/deactivate": {
      "post": {
        "operationId": "deactivate_licenses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/fulfillment-request"
                },
                "type": "array"
              }
            }
          },
          "description": "fulfillments to activate"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Performs an online request to KSM to deactivate the requested licenses.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/retrieve-activation-code-info": {
      "post": {
        "operationId": "get_activation_code_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activation-code-request"
              }
            }
          },
          "description": "activation code request"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Retrieves the activation code info from KSM.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/retrieve-activation-code-info-list": {
      "post": {
        "operationId": "get_activation_code_info_list",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activation-code-list-request"
              }
            }
          },
          "description": "activation codes request"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Retrieves the activation code info list from KSM.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/retrieve-counted-feature-stats": {
      "post": {
        "operationId": "get_counted_feature_stats",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Retrieves the counted feature stats.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/retrieve-entitlement-code-info": {
      "post": {
        "operationId": "get_entitlement_code_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entitlement-code-request"
              }
            }
          },
          "description": "entitlment code request"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Retrieves the activations codes of the supplied entitlement code from KSM.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/synchronize-licenses": {
      "post": {
        "operationId": "sync_licenses",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Synchronize local licenses with KSM.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/test-backend-connectivity": {
      "post": {
        "operationId": "test_backend_connectivity",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Accepted."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occured."
          }
        },
        "summary": "Tests connection of the license server with KSM.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/{operationType}/{id}": {
      "get": {
        "operationId": "get_async_operation_status",
        "parameters": [
          {
            "description": "The async operation type.",
            "in": "path",
            "name": "operationType",
            "required": "true",
            "schema": {
              "enum": [
                "activate",
                "deactivate",
                "synchronize-licenses",
                "retrieve-counted-feature-stats",
                "retrieve-entitlement-code-info",
                "retrieve-activation-code-info",
                "test-backend-connectivity"
              ],
              "type": "string"
            }
          },
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "id",
            "required": "true",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async-operation-response"
                }
              }
            },
            "description": "Completed."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-description"
                }
              }
            },
            "description": "An error occurred."
          }
        },
        "summary": "Returns the status of an ongoing async operation.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/licensing/operations/{operationType}/{id}/result": {
      "get": {
        "operationId": "get_async_operation_result",
        "parameters": [
          {
            "description": "The async operation type.",
            "in": "path",
            "name": "operationType",
            "required": "true",
            "schema": {
              "enum": [
                "activate",
                "deactivate",
                "synchronize-licenses",
                "retrieve-counted-feature-stats",
                "retrieve-entitlement-code-info",
                "retrieve-activation-code-info",
                "test-backend-connectivity"
              ],
              "type": "string"
            }
          },
          {
            "description": "The subresource id of the operation.",
            "in": "path",
            "name": "id",
            "required": "true",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/entitlement-code-info"
                    },
                    {
                      "$ref": "#/components/schemas/activation-code-info"
                    },
                    {
                      "$ref": "#/components/schemas/counted-feature-stats"
                    }
                  ]
                }
              }
            },
            "description": "Completed successfully."
          },
          "204": {
            "description": "No content."
          }
        },
        "summary": "Returns the result of async operation.",
        "tags": [
          "Licensing"
        ]
      }
    },
    "/api/v2/log-config": {
      "get": {
        "description": "Get the current global log level.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/LogConfig"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/LogConfig"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The current global log level"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      },
      "put": {
        "description": "Update the global log level for all services.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogConfig"
                }
              }
            },
            "description": "The current global log level"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/notification-counts": {
      "get": {
        "description": "Get the number of notifications that match the query.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "notificationId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "afterId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "severity",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "testId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customTags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeSeen",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NotificationCounts"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/NotificationCounts"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The number of notifications, aggregated by their severity"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v2/notifications": {
      "get": {
        "description": "Get all the notifications that match the query.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "afterId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "severity",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sessionId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "testId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customTags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ownerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeSeen",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sticky",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Notification"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Notification"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of notifications that match the query"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v2/notifications/operations/cleanup": {
      "post": {
        "description": "Cleanup all notifications that match the specified filter.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v2/notifications/operations/cleanup/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Notifications"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/notifications/operations/dismiss": {
      "post": {
        "description": "Dismiss all notifications that match the specified filter.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Notifications"
        ]
      }
    },
    "/api/v2/notifications/operations/dismiss/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Notifications"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/notifications/{notificationId}": {
      "delete": {
        "description": "Delete an existing notification.",
        "responses": {
          "204": {
            "description": "The notification was successfully deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The initiator of the request does not have enough privileges to perform the action."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A notification with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Notifications"
        ]
      },
      "get": {
        "description": "Get a particular notification.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            },
            "description": "The requested notification"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          }
        },
        "tags": [
          "Notifications"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the notification.",
          "in": "path",
          "name": "notificationId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/application-types": {
      "get": {
        "description": "Get all the available applications.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ApplicationType"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ApplicationType"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of applications"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/application-types/{applicationTypeId}": {
      "get": {
        "description": "Get a particular application.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationType"
                }
              }
            },
            "description": "The requested application"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the application type.",
          "in": "path",
          "name": "applicationTypeId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/apps": {
      "get": {
        "description": "Get all the available CyPerf applications.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/AppsecApp"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/AppsecApp"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of CyPerf applications"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/apps/{appId}": {
      "get": {
        "description": "Get a particular CyPerf application.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsecApp"
                }
              }
            },
            "description": "The requested CyPerf application"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A CyPerf application with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the app.",
          "in": "path",
          "name": "appId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/attack-categories": {
      "get": {
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/attacks": {
      "get": {
        "description": "Get all the available CyPerf attacks.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A string which filters the list of attacks by categories. The format is categories=category1:value1|...,....",
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/AppsecAttack"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/AppsecAttack"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of CyPerf attacks"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/attacks/{attackId}": {
      "get": {
        "description": "Get a particular CyPerf attack.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsecAttack"
                }
              }
            },
            "description": "The requested CyPerf attack"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A CyPerf attack with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the attack.",
          "in": "path",
          "name": "attackId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/auth-profiles": {
      "get": {
        "description": "Get all the available Auth profiles.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/AuthProfile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/AuthProfile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of Auth profiles"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/auth-profiles/{authProfileId}": {
      "get": {
        "description": "Get a particular Auth profile.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfile"
                }
              }
            },
            "description": "The requested Auth profile"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An Auth profile with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the auth profile.",
          "in": "path",
          "name": "authProfileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/certificates": {
      "get": {
        "description": "Get all the available certificates files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of certificates files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/certificates/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/certificates/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/certificates/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/certificates/{certificateId}": {
      "delete": {
        "description": "Delete a particular certificates file.",
        "responses": {
          "204": {
            "description": "The certificates file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular certificates archive file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested certificate archive file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A certificate archive file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the certificate.",
          "in": "path",
          "name": "certificateId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/certificates/{certificateId}/contentFile": {
      "get": {
        "description": "Get the content of a particular certificate archive file.",
        "responses": {
          "200": {
            "description": "The content of the certificate archive file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A certificate file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the certificate.",
          "in": "path",
          "name": "certificateId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/custom-import-operations": {
      "get": {
        "description": "Get all the custom import config operations.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/CustomImportHandler"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/CustomImportHandler"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of custom import config operations"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Configurations"
        ]
      }
    },
    "/api/v2/resources/flow-library": {
      "get": {
        "description": "Get all the available flow library files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of flow library files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/flow-library/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/flow-library/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/flow-library/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/flow-library/{flowLibraryId}": {
      "delete": {
        "description": "Delete a particular flow library file.",
        "responses": {
          "204": {
            "description": "The flow library file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular flow library file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested flow library file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A flow library file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the flow library.",
          "in": "path",
          "name": "flowLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/flow-library/{flowLibraryId}/contentFile": {
      "get": {
        "description": "Get the content of a particular flow library file.",
        "responses": {
          "200": {
            "description": "The content of the flow library file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A flow library file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the flow library.",
          "in": "path",
          "name": "flowLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/global-playlists": {
      "get": {
        "description": "Get all the available global playlists files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of global playlists files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/global-playlists/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/global-playlists/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/global-playlists/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/global-playlists/{globalPlaylistId}": {
      "delete": {
        "description": "Delete a particular global playlists file.",
        "responses": {
          "204": {
            "description": "The global playlists file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular global playlists archive file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested global playlists archive file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A global playlists archive file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the global playlist.",
          "in": "path",
          "name": "globalPlaylistId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/global-playlists/{globalPlaylistId}/contentFile": {
      "get": {
        "description": "Get the content of a particular global playlists archive file.",
        "responses": {
          "200": {
            "description": "The content of the global playlists archive file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A global playlists file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the global playlist.",
          "in": "path",
          "name": "globalPlaylistId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/http-library": {
      "get": {
        "description": "Get all the available http library files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of http library  files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/http-library/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/http-library/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/http-library/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/http-library/{httpLibraryId}": {
      "delete": {
        "description": "Delete a particular http library file.",
        "responses": {
          "204": {
            "description": "The http library file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular http library  file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested http library  file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A http library  file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the http library.",
          "in": "path",
          "name": "httpLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/http-library/{httpLibraryId}/contentFile": {
      "get": {
        "description": "Get the content of a particular http library file.",
        "responses": {
          "200": {
            "description": "The content of the http library file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A http library file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the http library.",
          "in": "path",
          "name": "httpLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/http-profiles": {
      "get": {
        "description": "Get all the available HTTP profiles.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/HTTPProfile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/HTTPProfile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of HTTP profiles"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/http-profiles/{httpProfileId}": {
      "get": {
        "description": "Get a particular HTTP profile.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPProfile"
                }
              }
            },
            "description": "The requested HTTP profile"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An HTTP profile with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the http profile.",
          "in": "path",
          "name": "httpProfileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-files": {
      "get": {
        "description": "Get all the available media files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of media files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/media-files/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/media-files/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-files/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-files/{mediaFileId}": {
      "delete": {
        "description": "Delete a particular media file.",
        "responses": {
          "204": {
            "description": "The media file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular media file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested media file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A media file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the media file.",
          "in": "path",
          "name": "mediaFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-files/{mediaFileId}/contentFile": {
      "get": {
        "description": "Get the content of a particular media file.",
        "responses": {
          "200": {
            "description": "The content of the media file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A media file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the media file.",
          "in": "path",
          "name": "mediaFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-library": {
      "get": {
        "description": "Get all the available media library files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of media library files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/media-library/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/media-library/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-library/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-library/{mediaLibraryId}": {
      "delete": {
        "description": "Delete a particular media library file.",
        "responses": {
          "204": {
            "description": "The media library file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular media library file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested media library file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A media library file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the media library.",
          "in": "path",
          "name": "mediaLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/media-library/{mediaLibraryId}/contentFile": {
      "get": {
        "description": "Get the content of a particular media library file.",
        "responses": {
          "200": {
            "description": "The content of the media library file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A media library file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the media library.",
          "in": "path",
          "name": "mediaLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/operations/get-attack-categories": {
      "post": {
        "description": "Get the list of attack categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCategoriesOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/operations/get-attack-categories/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/resources/operations/get-attacks": {
      "post": {
        "description": "Get the list of attacks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAttacksOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/operations/get-attacks/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/resources/operations/get-strike-categories": {
      "post": {
        "description": "Get the list of strike categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCategoriesOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/operations/get-strike-categories/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/resources/operations/get-strikes": {
      "post": {
        "description": "Get the list of strikes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStrikesOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/operations/get-strikes/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/resources/other-library": {
      "get": {
        "description": "Get all the available other library files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of other library files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/other-library/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/other-library/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/other-library/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/other-library/{otherLibraryId}": {
      "delete": {
        "description": "Delete a particular other library file.",
        "responses": {
          "204": {
            "description": "The other library file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular other library file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested other library file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An other library file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the other library.",
          "in": "path",
          "name": "otherLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/other-library/{otherLibraryId}/contentFile": {
      "get": {
        "description": "Get the content of a particular other library file.",
        "responses": {
          "200": {
            "description": "The content of the other library file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "An other library file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the other library.",
          "in": "path",
          "name": "otherLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/payloads": {
      "get": {
        "description": "Get all the available payload files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of payload files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/payloads/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/payloads/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/payloads/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/payloads/{payloadId}": {
      "delete": {
        "description": "Delete a particular payload file.",
        "responses": {
          "204": {
            "description": "The payload file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular payload file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested payload file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A payload file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the payload.",
          "in": "path",
          "name": "payloadId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/payloads/{payloadId}/contentFile": {
      "get": {
        "description": "Get the content of a particular payload file.",
        "responses": {
          "200": {
            "description": "The content of the payload file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A payload file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the payload.",
          "in": "path",
          "name": "payloadId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/pcaps": {
      "get": {
        "description": "Get all the available pcap files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of pcap files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/pcaps/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/pcaps/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/pcaps/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/pcaps/{pcapId}": {
      "delete": {
        "description": "Delete a particular pcap file.",
        "responses": {
          "204": {
            "description": "The pcap file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular pcap file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested pcap file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A pcap file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the pcap.",
          "in": "path",
          "name": "pcapId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/pcaps/{pcapId}/contentFile": {
      "get": {
        "description": "Get the content of a particular pcap file.",
        "responses": {
          "200": {
            "description": "The content of the pcap file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A pcap file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the pcap.",
          "in": "path",
          "name": "pcapId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/playlists": {
      "get": {
        "description": "Get all the available playlist files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of playlist files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/playlists/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/playlists/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/playlists/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/playlists/{playlistId}": {
      "delete": {
        "description": "Delete a particular playlist file.",
        "responses": {
          "204": {
            "description": "The playlist file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular playlist file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested playlist file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A playlist file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the playlist.",
          "in": "path",
          "name": "playlistId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/playlists/{playlistId}/contentFile": {
      "get": {
        "description": "Get the content of a particular playlist file.",
        "responses": {
          "200": {
            "description": "The content of the playlist file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A playlist file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the playlist.",
          "in": "path",
          "name": "playlistId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/playlists/{playlistId}/values": {
      "get": {
        "description": "Get some specific values from a playlist file.",
        "parameters": [
          {
            "description": "A comma-separated list of colName:rowIdx pairs",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested values from the playlist file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A playlist file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the playlist.",
          "in": "path",
          "name": "playlistId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/sip-library": {
      "get": {
        "description": "Get all the available sip library files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of sip library files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/sip-library/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/sip-library/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/sip-library/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/sip-library/{sipLibraryId}": {
      "delete": {
        "description": "Delete a particular sip library file.",
        "responses": {
          "204": {
            "description": "The sip library file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular sip library file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested sip library file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A sip library file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the sip library.",
          "in": "path",
          "name": "sipLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/sip-library/{sipLibraryId}/contentFile": {
      "get": {
        "description": "Get the content of a particular sip library file.",
        "responses": {
          "200": {
            "description": "The content of the sip library file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A sip library file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the sip library.",
          "in": "path",
          "name": "sipLibraryId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/stats-profile": {
      "get": {
        "description": "Get all the available stats profile files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of stats profile files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/stats-profile/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/stats-profile/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/stats-profile/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/stats-profile/{statsProfileId}": {
      "delete": {
        "description": "Delete a particular stats profile file.",
        "responses": {
          "204": {
            "description": "The stats profile file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular stats profile file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested stats profile file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A stats profile file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the stats profile.",
          "in": "path",
          "name": "statsProfileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/stats-profile/{statsProfileId}/contentFile": {
      "get": {
        "description": "Get the content of a particular stats profile file.",
        "responses": {
          "200": {
            "description": "The content of the stats profile file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A stats profile file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the stats profile.",
          "in": "path",
          "name": "statsProfileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/strike-categories": {
      "get": {
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/strikes": {
      "get": {
        "description": "Get all the available strikes.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A string which filters the list of strikes only to strikes compatible with the application type provided as value.",
            "in": "query",
            "name": "compatibleWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A string which filters the list of strikes by categories. The format is categories=category1:value1|...,....",
            "in": "query",
            "name": "categories",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ApplicationType"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ApplicationType"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of strikes"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/strikes/{strikeId}": {
      "get": {
        "description": "Get a particular strike.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationType"
                }
              }
            },
            "description": "The requested strike"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the strike.",
          "in": "path",
          "name": "strikeId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-certificates": {
      "get": {
        "description": "Get all the available TLS certificate files",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of TLS certificate files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-certificates/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-certificates/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-certificates/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-certificates/{tlsCertificateId}": {
      "delete": {
        "description": "Delete a particular TLS certificate file.",
        "responses": {
          "204": {
            "description": "The TLS certificate file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular TLS certificate file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested TLS certificate file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS certificate file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls certificate.",
          "in": "path",
          "name": "tlsCertificateId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-certificates/{tlsCertificateId}/contentFile": {
      "get": {
        "description": "Get the content of a particular TLS certificate file.",
        "responses": {
          "200": {
            "description": "The content of the TLS certificate file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS certificate file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls certificate.",
          "in": "path",
          "name": "tlsCertificateId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-dhs": {
      "get": {
        "description": "Get all the available TLS DH files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of TLS DH files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-dhs/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-dhs/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-dhs/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-dhs/{tlsDhId}": {
      "delete": {
        "description": "Delete a particular TLS DH file.",
        "responses": {
          "204": {
            "description": "The TLS DH file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular TLS DH file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested TLS DH file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS DH file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls dh.",
          "in": "path",
          "name": "tlsDhId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-dhs/{tlsDhId}/contentFile": {
      "get": {
        "description": "Get the content of a particular TLS DH file.",
        "responses": {
          "200": {
            "description": "The content of the TLS DH file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS DH file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls dh.",
          "in": "path",
          "name": "tlsDhId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-keys": {
      "get": {
        "description": "Get all the available TLS key files.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/GenericFile"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/GenericFile"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of TLS key files"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-keys/operations/uploadFile": {
      "post": {
        "description": "Upload a file.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Details about the operation that just started."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      }
    },
    "/api/v2/resources/tls-keys/operations/uploadFile/{uploadFileId}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "description": "Details about the ongoing operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-keys/operations/uploadFile/{uploadFileId}/result": {
      "get": {
        "description": "Get the result of the upload file operation.",
        "responses": {
          "200": {
            "description": "The payload file that was added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the uploadfile.",
          "in": "path",
          "name": "uploadFileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-keys/{tlsKeyId}": {
      "delete": {
        "description": "Delete a particular TLS key file.",
        "responses": {
          "204": {
            "description": "The TLS key file was successfully deleted."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "get": {
        "description": "Get a particular TLS key file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericFile"
                }
              }
            },
            "description": "The requested TLS key file"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS key file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls key.",
          "in": "path",
          "name": "tlsKeyId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/resources/tls-keys/{tlsKeyId}/contentFile": {
      "get": {
        "description": "Get the content of a particular TLS key file.",
        "responses": {
          "200": {
            "description": "The content of the TLS key file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A TLS key file with the specified ID was not found."
          }
        },
        "tags": [
          "Application Resources"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the tls key.",
          "in": "path",
          "name": "tlsKeyId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results": {
      "get": {
        "description": "Get all the available results.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ResultMetadata"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ResultMetadata"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of results"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/operations/batch-delete": {
      "post": {
        "description": "Remove multiple results.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/operations/batch-delete/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/tags": {
      "get": {
        "description": "Get all the currently available agent groups.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ResultsGroup"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ResultsGroup"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of agent groups"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/{resultId}": {
      "delete": {
        "description": "Delete a particular result.",
        "responses": {
          "204": {
            "description": "The result was successfully deleted."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The initiator of the request does not have enough privileges to perform the action."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "get": {
        "description": "Get a particular result.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMetadata"
                }
              }
            },
            "description": "The requested result"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/download-all/{downloadAllId}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A resource with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the download all.",
          "in": "path",
          "name": "downloadAllId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/download-csv/{downloadCsvId}": {
      "get": {
        "description": "Download the generated CSV reports for the current result as a zip file.",
        "responses": {
          "200": {
            "content": {
              "application/zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The content of the zip file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The requested CSV reports were not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Reports"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the download csv.",
          "in": "path",
          "name": "downloadCsvId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/download-pdf/{pdfId}": {
      "get": {
        "description": "Download the generated PDF report for the current result.",
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The content of the PDF report."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The requested PDF report was not found."
          }
        },
        "tags": [
          "Reports"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the download PDF operation.",
          "in": "path",
          "name": "pdfId",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/download-result-config": {
      "get": {
        "description": "Download the configuration associated with the result.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              },
              "application/zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The content of the zip file"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/files": {
      "get": {
        "description": "Get the list of files for a specific result.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/ResultFileMetadata"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/ResultFileMetadata"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of files"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/files/{fileId}": {
      "delete": {
        "description": "Delete a particular result file.",
        "responses": {
          "204": {
            "description": "The file was successfully deleted."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result or file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "get": {
        "description": "Get a particular result file.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultFileMetadata"
                }
              }
            },
            "description": "The requested file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result or file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the file.",
          "in": "path",
          "name": "fileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/files/{fileId}/content": {
      "get": {
        "description": "Get the content of a result file.",
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "The content of the result file"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result or file with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the file.",
          "in": "path",
          "name": "fileId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/operations/generate-all": {
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Generate all result types.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAllOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/{resultId}/operations/generate-all/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/operations/generate-csv": {
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Generate CSV reports for the current result.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCSVReportsOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/v2/results/{resultId}/operations/generate-csv/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Reports"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/operations/generate-pdf": {
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Generate a PDF report for the current result.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePDFReportOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Reports"
        ]
      }
    },
    "/api/v2/results/{resultId}/operations/generate-pdf/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Reports"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/operations/generate-results": {
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Export all result files zipped.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/{resultId}/operations/generate-results/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/operations/load": {
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Loads a completed result into a new session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Results"
        ]
      }
    },
    "/api/v2/results/{resultId}/operations/load/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Results"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/stats": {
      "get": {
        "description": "Get all the available queries.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/StatsResult"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/StatsResult"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The available statistics views of the current result"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Statistics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/results/{resultId}/stats/{statId}": {
      "get": {
        "description": "Query statistics",
        "parameters": [
          {
            "description": "(optional) UNIX time in milliseconds or milliseconds from the test start (based on useRelativeTime flag) as the query interval start. Defaults to 'now-5m' (in milliseconds) for false useRelativeTime, and 0 otherwise.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "(optional) UNIX time in milliseconds or milliseconds from the test start (based on useRelativeTime flag) as the query interval end. Defaults to 'now-7s' (in milliseconds).",
            "in": "query",
            "name": "to",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "(optional) The interval used to aggregate the statistics snapshots",
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "(optional) Specifies if the from/to params use milliseconds from test start or UNIX time in milliseconds",
            "in": "query",
            "name": "useRelativeTime",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsResult"
                }
              }
            },
            "description": "Successfully queried the statistics"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A result with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Statistics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the result.",
          "in": "path",
          "name": "resultId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the stat.",
          "in": "path",
          "name": "statId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sessions": {
      "get": {
        "description": "List all the sessions.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "A list of comma-separated columns used to search for the supplied values",
            "in": "query",
            "name": "searchCol",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The keywords used to filter the items",
            "in": "query",
            "name": "searchVal",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The operator applied to the supplied values",
            "in": "query",
            "name": "filterMode",
            "schema": {
              "enum": [
                "and",
                "or",
                "not"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of comma-separated field:direction pairs used to sort the items where direction must be asc or dsc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies if the sub-fields that are objects should be included.",
            "in": "query",
            "name": "include",
            "schema": {
              "enum": [
                "all"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Session"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Session"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of available sessions"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "post": {
        "description": "Create a new session by providing the URL of the configuration to be loaded.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Session"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Session created successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/operations/batch-delete": {
      "post": {
        "description": "Remove multiple sessions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/operations/batch-delete/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}": {
      "delete": {
        "description": "Delete a particular session.",
        "responses": {
          "204": {
            "description": "The session was successfully deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "The initiator of the request does not have enough privileges to perform the action."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "get": {
        "description": "Get a particular session.",
        "parameters": [
          {
            "description": "Specifies if the sub-fields that are objects should be included (eg. test).",
            "in": "query",
            "name": "include",
            "schema": {
              "enum": [
                "all"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            },
            "description": "The requested session"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular session. Only non-null fields are updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The session was successfully updated."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "put": {
        "description": "Update a particular session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            },
            "description": "The updated session"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/config": {
      "get": {
        "description": "Get the current session's configuration.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Specifies if the sub-fields that are objects should be included (eg. 'Config').",
            "in": "query",
            "name": "include",
            "schema": {
              "enum": [
                "all"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppsecConfig"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AppsecConfig"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The current session's configuration"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Update the current session's configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppsecConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsecConfig"
                }
              }
            },
            "description": "The updated configuration"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/config/$docs": {
      "get": {
        "description": "Get the OpenAPI definitions for CyPerf data model.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OpenAPIDefinitions"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/OpenAPIDefinitions"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The OpenAPI definitions for CyPerf data model"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/config/granular-stats": {
      "get": {
        "description": "Get granular statistics based on the session configuration.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The requested granular statistics"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/config/granular-stats-filters": {
      "get": {
        "description": "Get the filters for the granular statistics based on the session configuration.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The requested filters for the granular statistics"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/config/operations/granular-stats-default-dashboards": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create granular statistics dashboards based on the session configuration.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/config/operations/granular-stats-default-dashboards/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/config/operations/save": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Save the configuration of the current session using the specified name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveConfigOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/config/operations/save/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/meta": {
      "get": {
        "description": "Get the metadata of a particular session.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Pair"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Pair"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The requested session metadata"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Create a new session metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Pair"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pair"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Session metadata created successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "put": {
        "description": "Update the session metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Pair"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pair"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The updated session metadata"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session with the specified ID was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/meta/{metaId}": {
      "delete": {
        "description": "Delete a particular session metadata pair.",
        "responses": {
          "204": {
            "description": "The session metadata was successfully deleted."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session or metadata with the specified IDs were not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "get": {
        "description": "Get a particular session metadata pair.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pair"
                }
              }
            },
            "description": "The requested session metadata pair"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session or metadata with the specified IDs were not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the meta.",
          "in": "path",
          "name": "metaId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "Update a particular session metadata pair. Only non-null fields are updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pair"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The session metadata pair was successfully updated."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A session or metadata with the specified IDs were not found."
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/operations/loadConfig": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Load a new test in the current session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoadConfigOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/operations/loadConfig/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/operations/testEnd": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "This is called from traffic controller to notify that a test has ended. It should return any information needed by the traffic controller to completely clean up the test.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/TestStateChangedOperation"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/operations/testEnd/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/operations/testInit": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "This is called from traffic controller to notify that a new test is starting. It should return all the information needed by the traffic controller to start the test.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/TestStateChangedOperation"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/operations/testInit/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/operations/touch": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Update last visited field when session is touched.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/operations/touch/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/test": {
      "get": {
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestInfo"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The request was completed successfully."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestInfo"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Sessions"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-calibrate/operations/start": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Start calibration for the test configured in the current session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Operations"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-calibrate/operations/start/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Operations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/test-calibrate/operations/stop": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Stop calibration for the test configured in the current session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Operations"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-calibrate/operations/stop/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Operations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/abort": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Abort traffic for the test configured in the current session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Operations"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/abort/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Operations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/start": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Start traffic for the test configured in the current session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Operations"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/start/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Operations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/stop": {
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Stop traffic for the test configured in the current session.",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Test Operations"
        ]
      }
    },
    "/api/v2/sessions/{sessionId}/test-run/operations/stop/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Test Operations"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the session.",
          "in": "path",
          "name": "sessionId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        },
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/stats/plugins": {
      "get": {
        "description": "List all the plugins.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/Plugin"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/Plugin"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of available plugins"
          }
        },
        "tags": [
          "Statistics"
        ]
      },
      "post": {
        "description": "Create new plugins.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Plugin"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Plugin"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Plugins created successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Bad request"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Statistics"
        ]
      }
    },
    "/api/v2/stats/plugins/operations/ingest": {
      "post": {
        "description": "Ingest the plugin statistics.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngestOperation"
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the operation that just started"
          }
        },
        "tags": [
          "Statistics"
        ]
      }
    },
    "/api/v2/stats/plugins/operations/ingest/{id}": {
      "get": {
        "description": "Get the state of an ongoing operation.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncContext"
                }
              }
            },
            "description": "Details about the ongoing operation"
          }
        },
        "tags": [
          "Statistics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the async operation.",
          "in": "path",
          "name": "id",
          "required": "true",
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/api/v2/stats/plugins/{pluginId}": {
      "delete": {
        "description": "Delete a particular plugin.",
        "responses": {
          "204": {
            "description": "The plugin was successfully deleted."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "A plugin with the specified name was not found."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Statistics"
        ]
      },
      "parameters": [
        {
          "description": "The ID of the plugin.",
          "in": "path",
          "name": "pluginId",
          "required": "true",
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/tags": {
      "get": {
        "description": "Get all the currently available agent groups.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/AgentsGroup"
                      },
                      "type": "array"
                    },
                    {
                      "properties": {
                        "data": {
                          "items": {
                            "$ref": "#/components/schemas/AgentsGroup"
                          },
                          "type": "array"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The list of agent groups"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Unexpected error"
          }
        },
        "tags": [
          "Agents"
        ]
      }
    },
    "/api/v2/time": {
      "get": {
        "description": "Get the cluster time.",
        "parameters": [
          {
            "description": "The number of search results to return",
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of search results to skip",
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TimeValue"
                    },
                    {
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/TimeValue"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The current cluster time"
          }
        },
        "tags": [
          "Utils"
        ]
      }
    },
    "/auth/realms/keysight/protocol/openid-connect/token": {
      "post": {
        "description": "Get an access_token and refresh_token with a username+password, or use a refresh_token to generate a new access_token. You can also get a refresh_token from the UI, from Gear Menu > Administration > Offline Tokens. The access_token should be supplied in the Authorization header for all API requests.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "client_id": {
                    "enum": [
                      "clt-wap"
                    ],
                    "type": "string"
                  },
                  "grant_type": {
                    "description": "Controls the type of credentials to be used for authentication.",
                    "enum": [
                      "password",
                      "refresh_token"
                    ],
                    "type": "string"
                  },
                  "password": {
                    "description": "(only for grant_type: password) The password to use.",
                    "type": "string"
                  },
                  "refresh_token": {
                    "description": "(only for grant_type: refresh_token) The refresh token. You can obtain this from Gear Menu > Administration > Offline Tokens.",
                    "type": "string"
                  },
                  "scope": {
                    "enum": [
                      "openid offline_access"
                    ],
                    "type": "string"
                  },
                  "username": {
                    "description": "(only for grant_type: password) The username to use.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_token": {
                      "description": "The access token. Set this in the Authorization HTTP Header to authenticate requests.",
                      "type": "string"
                    },
                    "expires_in": {
                      "description": "The access token lifetime.",
                      "type": "number"
                    },
                    "refresh_expires_in": {
                      "description": "The refresh token lifetime.",
                      "type": "number"
                    },
                    "refresh_token": {
                      "description": "Token that can be used with this request and grant_type: refresh_token to get a new access_token if the current one expires.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A new token."
          }
        },
        "tags": [
          "Authorization"
        ]
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "offline_access",
        "openid"
      ]
    }
  ],
  "tags": [
    {
      "description": "Generates tokens for API requests",
      "name": "Authorization"
    },
    {
      "description": "Manages configurations - configurations are used to save test parameters",
      "name": "Configurations"
    },
    {
      "description": "Manages sessions - sessions are used to load a specific configuration and to run tests in an environment isolated from other tests",
      "name": "Sessions"
    },
    {
      "description": "Manages agents - agents are used to generate traffic",
      "name": "Agents"
    },
    {
      "description": "Provides the list of operations that can be performed on a test",
      "name": "Test Operations"
    },
    {
      "description": "Manages results - results hold the test results and statistics",
      "name": "Test Results"
    },
    {
      "description": "Provides statistics",
      "name": "Statistics"
    },
    {
      "description": "Generates CSV and PDF reports",
      "name": "Reports"
    },
    {
      "description": "Manages apps & security resources",
      "name": "Application Resources"
    },
    {
      "description": "Manages license servers",
      "name": "License servers"
    },
    {
      "description": "Manages external brokers",
      "name": "Brokers"
    },
    {
      "description": "Provides the list of licensing related operations",
      "name": "Licensing"
    },
    {
      "description": "Provides diagnostics",
      "name": "Diagnostics"
    },
    {
      "description": "Manages notifications",
      "name": "Notifications"
    },
    {
      "description": "Migrates data from one controller to another",
      "name": "Data Migration"
    },
    {
      "description": "Cluster utils",
      "name": "Utils"
    }
  ]
}
